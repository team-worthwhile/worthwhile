grammar edu.kit.iti.formal.pse.worthwhile.Worthwhile with org.eclipse.xtext.common.Terminals 

import "platform:/resource/edu.kit.iti.formal.pse.worthwhile.model/model/Worthwhile.ecore#//AST"

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

// A program consists of a sequence of statements and/or function declarations.
Program returns Program:
	{Program}
	NL* // Newline at the beginning of the file is allowed. 
	((axioms+=Axiom | functionDeclarations+=FunctionDeclaration) NL+)* // All statements need a newline after them. FIXME: End of file?
	(mainBlock=Block)?
	((axioms+=Axiom | functionDeclarations+=FunctionDeclaration) NL+)*
;

// Override the whitespace rules: Disallow line breaks as whitespace since we want to use them to separate statements 
terminal WS : (' '|'\t')+;

// A newline consists of at least one '\n'.
terminal NL : ('\r' | '\n' | WS)* '\n' WS*;

// A single line comment includes everything from // to the next newline, but not the newline itself.
terminal SL_COMMENT : 
	'//' !('\n'|'\r')*
;

terminal NUMBER returns ecore::EBigInteger:
 	'-'? ('0'..'9')+
 ;
 
terminal INT returns ecore::EInt:
 	"$$$don't use this anymore$$$"
 ;
 
Axiom returns Axiom:
	'_axiom' expression=Expression
;

// A block consists of one or multiple statements enclosed in curly brackets.
Block returns Block:
	{Block} '{' NL* (statements+=Statement NL+)* '}'
;

// A statement is everything that can be executed in the program.
Statement returns Statement:
	(VariableDeclaration | Assignment | Block | Annotation | IfStatement | WhileStatement | ReturnStatement)
;

// A return statement returns a value from a function.
ReturnStatement returns ReturnStatement:
	'return' returnValue=Expression
;

// A while statement specifies a while loop.
WhileStatement returns Loop:
	'while' condition=Expression (invariants+=Invariant)* body=Block
;

// 
Invariant returns Invariant:
	'_invariant' expression=(Expression | QuantifiedExpression) NL+ 
;

// An if statement specifies a conditional Expression.
IfStatement returns Conditional:
	'if' condition=Expression trueBlock=Block ('else' falseBlock=Block)?
;

// A function declaration declares a function name, parameters, return type, and function body.
FunctionDeclaration returns FunctionDeclaration:
	'function' returnType=Type name=ID '(' (parameters+=Parameter (',' parameters+=Parameter)* )? ')' NL* (preconditions+=Require | postconditions+=Ensure)* body=Block 
;

Require returns Precondition:
	'_requires' expression=(Expression | QuantifiedExpression) NL+ 
;

Ensure returns Postcondition:
	'_ensures' expression=(Expression | QuantifiedExpression) NL+ 
;
 
// A parameter definition describes a single parameter (type and name) accepted by a function.
Parameter returns Parameter: // FIXME
	{Parameter} type=Type name=ID
;

// A type can either be a primitive type or an array of a primitive type
Type returns Type:
	PrimitiveType | ArrayType
;

// A primitive type represents a variable type that can hold one value.
PrimitiveType returns PrimitiveType:
	{IntegerType} 'Integer' | {BooleanType} 'Boolean'	
;

// An array type represents an array of a primitive type.
ArrayType returns ArrayType:
	{ArrayType} baseType=PrimitiveType '[' size=Expression ']'
;

// A function call simply calls a function without returning a value.
FunctionCall returns FunctionCall:
	function=[FunctionDeclaration] '(' (actuals+=Expression)? (',' actuals+=Expression)* ')'
;
 
// An annotation is used to specify assertions and assumptions.
Annotation returns Annotation:
	 ({Assertion} '_assert' | {Assumption} '_assume') expression=(Expression | QuantifiedExpression)
;

// A quantified Expression is an Expression optionally preceded by some quantifier definitions.
QuantifiedExpression returns QuantifiedExpression:
	(({ForAllQuantifier} ('forall' | '∀') | {ExistsQuantifier} ('exists' | '∃')) parameter=Parameter (',' condition=Expression)?) (expression=QuantifiedExpression | ':' expression=Expression)
;

// A variable declaration declares a new variable and assigns it a value.
VariableDeclaration returns VariableDeclaration:
	{VariableDeclaration} type=Type name=ID ':=' initialValue=Expression
;

// An assignment assigns a value to a variable.
Assignment returns Assignment:
	variable=VariableReference ':=' value=Expression
;

// An Expression is based on operator precedence. Each "level" of Expressions means one level of operator precedence,
// where the last operation specified has the highest priority. In the same level, operators are evaluated from left to right.
Expression returns Expression:
	BooleanOr
;

// The boolean or has the lowest priority.
BooleanOr returns Expression:
	BooleanAnd ({Disjunction.left=current} ('∨' | '||') right=BooleanAnd)?
;

// The boolean and has second lowest priority.
BooleanAnd returns Expression:
	EqualsComparison ({Conjunction.left=current} ('∧' | '&&') right=EqualsComparison)?
;

// The equals comparison is next in priority.
EqualsComparison returns Expression:
	Comparison ({Equal.left=current} '=' right=Comparison)?
;

// A comparison of two integer values is next in priority.
Comparison returns Expression:
	Addition (({Less.left=current} '<' | {LessOrEqual.left=current} ('<=' | '≤') | {GreaterOrEqual.left=current} ('>=' | '≥') | {Greater.left=current} '>') right=Addition)?
;

// Next in priority are addition and subtraction
Addition returns Expression:
	Multiplication (({Addition.left=current} '+' | {Subtraction.left=current} '-') right=Multiplication)*
;

// Next in priority are multiplication, division, and modulo.
Multiplication returns Expression:
	UnaryOperation (({Multiplication.left=current} ('*' | '·') | {Division.left=current} ('/' | '÷') | {Modulus.left=current} '%') right=UnaryOperation)*
;

// The unary operations (unary plus, unary minus, Boolean not) have second highest priority.
UnaryOperation returns Expression:
	 ArrayAccess | (({Plus} '-' | {Minus} '+' | {Negation} ('¬'|'!') ) operand=ArrayAccess)
;

// The access of array items via an index has highest priority.
ArrayAccess returns Expression:
	Atomic ({ArrayAccess.operand=current} "[" index=Expression "]")?
;

// An atomic value in an Expression is either
//  - a function call or
//  - a number or
//  - a Boolean literal or
//  - a reference to a variable
//  - a whole new Expression in parentheses.
Atomic returns Expression:
	FunctionCall | {IntegerLiteral} value=NUMBER | BooleanLiteral | VariableReference | '(' Expression ')'
;

// A Boolean literal is either "true" or "false"
BooleanLiteral returns BooleanLiteral:
	value=BooleanValue
;

BooleanValue returns ecore::EBoolean:
	'true' | 'false'
;

// A variable reference is used to denote the current content of a variable. 
VariableReference returns VariableReference:
		{VariableReference} variable=[VariableDeclaration] // TODO ('[' index=Expression ']')?
;