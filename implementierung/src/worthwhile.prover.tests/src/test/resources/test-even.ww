// EXPECTED:VALID
function Boolean even(Integer x)
_ensures (exists Integer k1 : 2 * k1 = x && _return = true) || (exists Integer k2 : 2 * k2 - 1 = x && _return = false)
{
    Integer temp := x % 2
    if temp = 0 {
        return true
    }
    if temp = 1 {
        return false
    }
    return false
}

function Boolean even2(Integer y)
_ensures(((exists Integer j : 2 * j = y) ∧ (_return = true)) ∨ ((exists Integer k : 2 * k - 1 = y) ∧ (_return = false)))
{
    Integer tmp := y % 2
    Boolean result

    if (tmp = 0) {
        result := true
    }

    if (tmp = 1) {
        result := false
    }

    return result
}

Integer i := 3

if even2(i + 1) {
    _assert i % 4 = 1 ∨ (i - 2) % 4 = 1
} else {
    _assert i % 4 = 0 ∨ (i - 2) % 4 = 0
}

_assert ¬even2(i)
