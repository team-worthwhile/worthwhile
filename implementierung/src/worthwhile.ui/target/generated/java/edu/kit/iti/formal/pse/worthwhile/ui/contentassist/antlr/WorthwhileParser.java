/*
* generated by Xtext
*/
package edu.kit.iti.formal.pse.worthwhile.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import edu.kit.iti.formal.pse.worthwhile.services.WorthwhileGrammarAccess;

public class WorthwhileParser extends AbstractContentAssistParser {
	
	@Inject
	private WorthwhileGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected edu.kit.iti.formal.pse.worthwhile.ui.contentassist.antlr.internal.InternalWorthwhileParser createParser() {
		edu.kit.iti.formal.pse.worthwhile.ui.contentassist.antlr.internal.InternalWorthwhileParser result = new edu.kit.iti.formal.pse.worthwhile.ui.contentassist.antlr.internal.InternalWorthwhileParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getProgramAccess().getAlternatives_2_0(), "rule__Program__Alternatives_2_0");
					put(grammarAccess.getStatementAccess().getAlternatives(), "rule__Statement__Alternatives");
					put(grammarAccess.getFunctionDeclarationAccess().getAlternatives_7(), "rule__FunctionDeclaration__Alternatives_7");
					put(grammarAccess.getTypeAccess().getAlternatives(), "rule__Type__Alternatives");
					put(grammarAccess.getPrimitiveTypeAccess().getAlternatives(), "rule__PrimitiveType__Alternatives");
					put(grammarAccess.getAnnotationAccess().getAlternatives_0(), "rule__Annotation__Alternatives_0");
					put(grammarAccess.getQuantifiedExpressionAccess().getAlternatives_0_0(), "rule__QuantifiedExpression__Alternatives_0_0");
					put(grammarAccess.getQuantifiedExpressionAccess().getAlternatives_0_0_0_1(), "rule__QuantifiedExpression__Alternatives_0_0_0_1");
					put(grammarAccess.getQuantifiedExpressionAccess().getAlternatives_0_0_1_1(), "rule__QuantifiedExpression__Alternatives_0_0_1_1");
					put(grammarAccess.getQuantifiedExpressionAccess().getAlternatives_1(), "rule__QuantifiedExpression__Alternatives_1");
					put(grammarAccess.getExpressionAccess().getAlternatives(), "rule__Expression__Alternatives");
					put(grammarAccess.getBooleanOrAccess().getAlternatives_1_1(), "rule__BooleanOr__Alternatives_1_1");
					put(grammarAccess.getBooleanAndAccess().getAlternatives_1_1(), "rule__BooleanAnd__Alternatives_1_1");
					put(grammarAccess.getEqualsComparisonAccess().getAlternatives_1_0(), "rule__EqualsComparison__Alternatives_1_0");
					put(grammarAccess.getEqualsComparisonAccess().getAlternatives_1_0_1_1(), "rule__EqualsComparison__Alternatives_1_0_1_1");
					put(grammarAccess.getComparisonAccess().getAlternatives_1_0(), "rule__Comparison__Alternatives_1_0");
					put(grammarAccess.getComparisonAccess().getAlternatives_1_0_1_1(), "rule__Comparison__Alternatives_1_0_1_1");
					put(grammarAccess.getComparisonAccess().getAlternatives_1_0_2_1(), "rule__Comparison__Alternatives_1_0_2_1");
					put(grammarAccess.getAdditionAccess().getAlternatives_1_0(), "rule__Addition__Alternatives_1_0");
					put(grammarAccess.getMultiplicationAccess().getAlternatives_1_0(), "rule__Multiplication__Alternatives_1_0");
					put(grammarAccess.getMultiplicationAccess().getAlternatives_1_0_0_1(), "rule__Multiplication__Alternatives_1_0_0_1");
					put(grammarAccess.getMultiplicationAccess().getAlternatives_1_0_1_1(), "rule__Multiplication__Alternatives_1_0_1_1");
					put(grammarAccess.getUnaryOperationAccess().getAlternatives(), "rule__UnaryOperation__Alternatives");
					put(grammarAccess.getUnaryOperationAccess().getAlternatives_1_0(), "rule__UnaryOperation__Alternatives_1_0");
					put(grammarAccess.getUnaryOperationAccess().getAlternatives_1_0_2_1(), "rule__UnaryOperation__Alternatives_1_0_2_1");
					put(grammarAccess.getAtomicAccess().getAlternatives(), "rule__Atomic__Alternatives");
					put(grammarAccess.getProgramAccess().getGroup(), "rule__Program__Group__0");
					put(grammarAccess.getProgramAccess().getGroup_2(), "rule__Program__Group_2__0");
					put(grammarAccess.getAxiomAccess().getGroup(), "rule__Axiom__Group__0");
					put(grammarAccess.getBlockAccess().getGroup(), "rule__Block__Group__0");
					put(grammarAccess.getBlockAccess().getGroup_1(), "rule__Block__Group_1__0");
					put(grammarAccess.getBracedBlockAccess().getGroup(), "rule__BracedBlock__Group__0");
					put(grammarAccess.getBracedBlockAccess().getGroup_3(), "rule__BracedBlock__Group_3__0");
					put(grammarAccess.getReturnStatementAccess().getGroup(), "rule__ReturnStatement__Group__0");
					put(grammarAccess.getWhileStatementAccess().getGroup(), "rule__WhileStatement__Group__0");
					put(grammarAccess.getInvariantAccess().getGroup(), "rule__Invariant__Group__0");
					put(grammarAccess.getIfStatementAccess().getGroup(), "rule__IfStatement__Group__0");
					put(grammarAccess.getIfStatementAccess().getGroup_3(), "rule__IfStatement__Group_3__0");
					put(grammarAccess.getFunctionDeclarationAccess().getGroup(), "rule__FunctionDeclaration__Group__0");
					put(grammarAccess.getFunctionDeclarationAccess().getGroup_4(), "rule__FunctionDeclaration__Group_4__0");
					put(grammarAccess.getFunctionDeclarationAccess().getGroup_4_1(), "rule__FunctionDeclaration__Group_4_1__0");
					put(grammarAccess.getRequireAccess().getGroup(), "rule__Require__Group__0");
					put(grammarAccess.getEnsureAccess().getGroup(), "rule__Ensure__Group__0");
					put(grammarAccess.getParameterAccess().getGroup(), "rule__Parameter__Group__0");
					put(grammarAccess.getPrimitiveTypeAccess().getGroup_0(), "rule__PrimitiveType__Group_0__0");
					put(grammarAccess.getPrimitiveTypeAccess().getGroup_1(), "rule__PrimitiveType__Group_1__0");
					put(grammarAccess.getArrayTypeAccess().getGroup(), "rule__ArrayType__Group__0");
					put(grammarAccess.getFunctionCallAccess().getGroup(), "rule__FunctionCall__Group__0");
					put(grammarAccess.getFunctionCallAccess().getGroup_3(), "rule__FunctionCall__Group_3__0");
					put(grammarAccess.getAnnotationAccess().getGroup(), "rule__Annotation__Group__0");
					put(grammarAccess.getAnnotationAccess().getGroup_0_0(), "rule__Annotation__Group_0_0__0");
					put(grammarAccess.getAnnotationAccess().getGroup_0_1(), "rule__Annotation__Group_0_1__0");
					put(grammarAccess.getQuantifiedExpressionAccess().getGroup(), "rule__QuantifiedExpression__Group__0");
					put(grammarAccess.getQuantifiedExpressionAccess().getGroup_0(), "rule__QuantifiedExpression__Group_0__0");
					put(grammarAccess.getQuantifiedExpressionAccess().getGroup_0_0_0(), "rule__QuantifiedExpression__Group_0_0_0__0");
					put(grammarAccess.getQuantifiedExpressionAccess().getGroup_0_0_1(), "rule__QuantifiedExpression__Group_0_0_1__0");
					put(grammarAccess.getQuantifiedExpressionAccess().getGroup_0_2(), "rule__QuantifiedExpression__Group_0_2__0");
					put(grammarAccess.getQuantifiedExpressionAccess().getGroup_1_1(), "rule__QuantifiedExpression__Group_1_1__0");
					put(grammarAccess.getVariableDeclarationAccess().getGroup(), "rule__VariableDeclaration__Group__0");
					put(grammarAccess.getAssignmentAccess().getGroup(), "rule__Assignment__Group__0");
					put(grammarAccess.getBooleanOrAccess().getGroup(), "rule__BooleanOr__Group__0");
					put(grammarAccess.getBooleanOrAccess().getGroup_1(), "rule__BooleanOr__Group_1__0");
					put(grammarAccess.getBooleanAndAccess().getGroup(), "rule__BooleanAnd__Group__0");
					put(grammarAccess.getBooleanAndAccess().getGroup_1(), "rule__BooleanAnd__Group_1__0");
					put(grammarAccess.getEqualsComparisonAccess().getGroup(), "rule__EqualsComparison__Group__0");
					put(grammarAccess.getEqualsComparisonAccess().getGroup_1(), "rule__EqualsComparison__Group_1__0");
					put(grammarAccess.getEqualsComparisonAccess().getGroup_1_0_0(), "rule__EqualsComparison__Group_1_0_0__0");
					put(grammarAccess.getEqualsComparisonAccess().getGroup_1_0_1(), "rule__EqualsComparison__Group_1_0_1__0");
					put(grammarAccess.getComparisonAccess().getGroup(), "rule__Comparison__Group__0");
					put(grammarAccess.getComparisonAccess().getGroup_1(), "rule__Comparison__Group_1__0");
					put(grammarAccess.getComparisonAccess().getGroup_1_0_0(), "rule__Comparison__Group_1_0_0__0");
					put(grammarAccess.getComparisonAccess().getGroup_1_0_1(), "rule__Comparison__Group_1_0_1__0");
					put(grammarAccess.getComparisonAccess().getGroup_1_0_2(), "rule__Comparison__Group_1_0_2__0");
					put(grammarAccess.getComparisonAccess().getGroup_1_0_3(), "rule__Comparison__Group_1_0_3__0");
					put(grammarAccess.getAdditionAccess().getGroup(), "rule__Addition__Group__0");
					put(grammarAccess.getAdditionAccess().getGroup_1(), "rule__Addition__Group_1__0");
					put(grammarAccess.getAdditionAccess().getGroup_1_0_0(), "rule__Addition__Group_1_0_0__0");
					put(grammarAccess.getAdditionAccess().getGroup_1_0_1(), "rule__Addition__Group_1_0_1__0");
					put(grammarAccess.getMultiplicationAccess().getGroup(), "rule__Multiplication__Group__0");
					put(grammarAccess.getMultiplicationAccess().getGroup_1(), "rule__Multiplication__Group_1__0");
					put(grammarAccess.getMultiplicationAccess().getGroup_1_0_0(), "rule__Multiplication__Group_1_0_0__0");
					put(grammarAccess.getMultiplicationAccess().getGroup_1_0_1(), "rule__Multiplication__Group_1_0_1__0");
					put(grammarAccess.getMultiplicationAccess().getGroup_1_0_2(), "rule__Multiplication__Group_1_0_2__0");
					put(grammarAccess.getUnaryOperationAccess().getGroup_1(), "rule__UnaryOperation__Group_1__0");
					put(grammarAccess.getUnaryOperationAccess().getGroup_1_0_0(), "rule__UnaryOperation__Group_1_0_0__0");
					put(grammarAccess.getUnaryOperationAccess().getGroup_1_0_1(), "rule__UnaryOperation__Group_1_0_1__0");
					put(grammarAccess.getUnaryOperationAccess().getGroup_1_0_2(), "rule__UnaryOperation__Group_1_0_2__0");
					put(grammarAccess.getUnaryOperationAccess().getGroup_2(), "rule__UnaryOperation__Group_2__0");
					put(grammarAccess.getAtomicAccess().getGroup_1(), "rule__Atomic__Group_1__0");
					put(grammarAccess.getAtomicAccess().getGroup_2(), "rule__Atomic__Group_2__0");
					put(grammarAccess.getAtomicAccess().getGroup_4(), "rule__Atomic__Group_4__0");
					put(grammarAccess.getVariableReferenceAccess().getGroup(), "rule__VariableReference__Group__0");
					put(grammarAccess.getVariableReferenceAccess().getGroup_2(), "rule__VariableReference__Group_2__0");
					put(grammarAccess.getProgramAccess().getAxiomsAssignment_2_0_0(), "rule__Program__AxiomsAssignment_2_0_0");
					put(grammarAccess.getProgramAccess().getFunctionDeclarationsAssignment_2_0_1(), "rule__Program__FunctionDeclarationsAssignment_2_0_1");
					put(grammarAccess.getProgramAccess().getMainBlockAssignment_3(), "rule__Program__MainBlockAssignment_3");
					put(grammarAccess.getAxiomAccess().getExpressionAssignment_1(), "rule__Axiom__ExpressionAssignment_1");
					put(grammarAccess.getBlockAccess().getStatementsAssignment_1_0(), "rule__Block__StatementsAssignment_1_0");
					put(grammarAccess.getBracedBlockAccess().getStatementsAssignment_3_0(), "rule__BracedBlock__StatementsAssignment_3_0");
					put(grammarAccess.getReturnStatementAccess().getReturnValueAssignment_1(), "rule__ReturnStatement__ReturnValueAssignment_1");
					put(grammarAccess.getWhileStatementAccess().getConditionAssignment_1(), "rule__WhileStatement__ConditionAssignment_1");
					put(grammarAccess.getWhileStatementAccess().getInvariantsAssignment_2(), "rule__WhileStatement__InvariantsAssignment_2");
					put(grammarAccess.getWhileStatementAccess().getBodyAssignment_3(), "rule__WhileStatement__BodyAssignment_3");
					put(grammarAccess.getInvariantAccess().getExpressionAssignment_1(), "rule__Invariant__ExpressionAssignment_1");
					put(grammarAccess.getIfStatementAccess().getConditionAssignment_1(), "rule__IfStatement__ConditionAssignment_1");
					put(grammarAccess.getIfStatementAccess().getTrueBlockAssignment_2(), "rule__IfStatement__TrueBlockAssignment_2");
					put(grammarAccess.getIfStatementAccess().getFalseBlockAssignment_3_1(), "rule__IfStatement__FalseBlockAssignment_3_1");
					put(grammarAccess.getFunctionDeclarationAccess().getReturnTypeAssignment_1(), "rule__FunctionDeclaration__ReturnTypeAssignment_1");
					put(grammarAccess.getFunctionDeclarationAccess().getNameAssignment_2(), "rule__FunctionDeclaration__NameAssignment_2");
					put(grammarAccess.getFunctionDeclarationAccess().getParametersAssignment_4_0(), "rule__FunctionDeclaration__ParametersAssignment_4_0");
					put(grammarAccess.getFunctionDeclarationAccess().getParametersAssignment_4_1_1(), "rule__FunctionDeclaration__ParametersAssignment_4_1_1");
					put(grammarAccess.getFunctionDeclarationAccess().getPreconditionsAssignment_7_0(), "rule__FunctionDeclaration__PreconditionsAssignment_7_0");
					put(grammarAccess.getFunctionDeclarationAccess().getPostconditionsAssignment_7_1(), "rule__FunctionDeclaration__PostconditionsAssignment_7_1");
					put(grammarAccess.getFunctionDeclarationAccess().getBodyAssignment_8(), "rule__FunctionDeclaration__BodyAssignment_8");
					put(grammarAccess.getRequireAccess().getExpressionAssignment_1(), "rule__Require__ExpressionAssignment_1");
					put(grammarAccess.getEnsureAccess().getExpressionAssignment_1(), "rule__Ensure__ExpressionAssignment_1");
					put(grammarAccess.getParameterAccess().getTypeAssignment_1(), "rule__Parameter__TypeAssignment_1");
					put(grammarAccess.getParameterAccess().getNameAssignment_2(), "rule__Parameter__NameAssignment_2");
					put(grammarAccess.getArrayTypeAccess().getBaseTypeAssignment_1(), "rule__ArrayType__BaseTypeAssignment_1");
					put(grammarAccess.getArrayTypeAccess().getSizeAssignment_3(), "rule__ArrayType__SizeAssignment_3");
					put(grammarAccess.getFunctionCallAccess().getFunctionAssignment_0(), "rule__FunctionCall__FunctionAssignment_0");
					put(grammarAccess.getFunctionCallAccess().getActualsAssignment_2(), "rule__FunctionCall__ActualsAssignment_2");
					put(grammarAccess.getFunctionCallAccess().getActualsAssignment_3_1(), "rule__FunctionCall__ActualsAssignment_3_1");
					put(grammarAccess.getAnnotationAccess().getExpressionAssignment_1(), "rule__Annotation__ExpressionAssignment_1");
					put(grammarAccess.getQuantifiedExpressionAccess().getParameterAssignment_0_1(), "rule__QuantifiedExpression__ParameterAssignment_0_1");
					put(grammarAccess.getQuantifiedExpressionAccess().getConditionAssignment_0_2_1(), "rule__QuantifiedExpression__ConditionAssignment_0_2_1");
					put(grammarAccess.getQuantifiedExpressionAccess().getExpressionAssignment_1_0(), "rule__QuantifiedExpression__ExpressionAssignment_1_0");
					put(grammarAccess.getQuantifiedExpressionAccess().getExpressionAssignment_1_1_1(), "rule__QuantifiedExpression__ExpressionAssignment_1_1_1");
					put(grammarAccess.getVariableDeclarationAccess().getTypeAssignment_1(), "rule__VariableDeclaration__TypeAssignment_1");
					put(grammarAccess.getVariableDeclarationAccess().getNameAssignment_2(), "rule__VariableDeclaration__NameAssignment_2");
					put(grammarAccess.getVariableDeclarationAccess().getInitialValueAssignment_4(), "rule__VariableDeclaration__InitialValueAssignment_4");
					put(grammarAccess.getAssignmentAccess().getVariableAssignment_0(), "rule__Assignment__VariableAssignment_0");
					put(grammarAccess.getAssignmentAccess().getValueAssignment_2(), "rule__Assignment__ValueAssignment_2");
					put(grammarAccess.getBooleanOrAccess().getRightAssignment_1_2(), "rule__BooleanOr__RightAssignment_1_2");
					put(grammarAccess.getBooleanAndAccess().getRightAssignment_1_2(), "rule__BooleanAnd__RightAssignment_1_2");
					put(grammarAccess.getEqualsComparisonAccess().getRightAssignment_1_1(), "rule__EqualsComparison__RightAssignment_1_1");
					put(grammarAccess.getComparisonAccess().getRightAssignment_1_1(), "rule__Comparison__RightAssignment_1_1");
					put(grammarAccess.getAdditionAccess().getRightAssignment_1_1(), "rule__Addition__RightAssignment_1_1");
					put(grammarAccess.getMultiplicationAccess().getRightAssignment_1_1(), "rule__Multiplication__RightAssignment_1_1");
					put(grammarAccess.getUnaryOperationAccess().getOperandAssignment_1_1(), "rule__UnaryOperation__OperandAssignment_1_1");
					put(grammarAccess.getUnaryOperationAccess().getOperandAssignment_2_3(), "rule__UnaryOperation__OperandAssignment_2_3");
					put(grammarAccess.getAtomicAccess().getValueAssignment_1_1(), "rule__Atomic__ValueAssignment_1_1");
					put(grammarAccess.getAtomicAccess().getValueAssignment_2_1(), "rule__Atomic__ValueAssignment_2_1");
					put(grammarAccess.getVariableReferenceAccess().getVariableAssignment_1(), "rule__VariableReference__VariableAssignment_1");
					put(grammarAccess.getVariableReferenceAccess().getIndexAssignment_2_1(), "rule__VariableReference__IndexAssignment_2_1");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			edu.kit.iti.formal.pse.worthwhile.ui.contentassist.antlr.internal.InternalWorthwhileParser typedParser = (edu.kit.iti.formal.pse.worthwhile.ui.contentassist.antlr.internal.InternalWorthwhileParser) parser;
			typedParser.entryRuleProgram();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public WorthwhileGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(WorthwhileGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
