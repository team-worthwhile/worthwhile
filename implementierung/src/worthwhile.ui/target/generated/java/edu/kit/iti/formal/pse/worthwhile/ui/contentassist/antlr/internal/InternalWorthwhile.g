/*
* generated by Xtext
*/
grammar InternalWorthwhile;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package edu.kit.iti.formal.pse.worthwhile.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package edu.kit.iti.formal.pse.worthwhile.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import edu.kit.iti.formal.pse.worthwhile.services.WorthwhileGrammarAccess;

}

@parser::members {
 
 	private WorthwhileGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(WorthwhileGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleProgram
entryRuleProgram 
:
{ before(grammarAccess.getProgramRule()); }
	 ruleProgram
{ after(grammarAccess.getProgramRule()); } 
	 EOF 
;

// Rule Program
ruleProgram
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getProgramAccess().getGroup()); }
(rule__Program__Group__0)
{ after(grammarAccess.getProgramAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAxiom
entryRuleAxiom 
:
{ before(grammarAccess.getAxiomRule()); }
	 ruleAxiom
{ after(grammarAccess.getAxiomRule()); } 
	 EOF 
;

// Rule Axiom
ruleAxiom
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAxiomAccess().getGroup()); }
(rule__Axiom__Group__0)
{ after(grammarAccess.getAxiomAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBlock
entryRuleBlock 
:
{ before(grammarAccess.getBlockRule()); }
	 ruleBlock
{ after(grammarAccess.getBlockRule()); } 
	 EOF 
;

// Rule Block
ruleBlock
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBlockAccess().getGroup()); }
(rule__Block__Group__0)
{ after(grammarAccess.getBlockAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBracedBlock
entryRuleBracedBlock 
:
{ before(grammarAccess.getBracedBlockRule()); }
	 ruleBracedBlock
{ after(grammarAccess.getBracedBlockRule()); } 
	 EOF 
;

// Rule BracedBlock
ruleBracedBlock
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBracedBlockAccess().getGroup()); }
(rule__BracedBlock__Group__0)
{ after(grammarAccess.getBracedBlockAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleStatement
entryRuleStatement 
:
{ before(grammarAccess.getStatementRule()); }
	 ruleStatement
{ after(grammarAccess.getStatementRule()); } 
	 EOF 
;

// Rule Statement
ruleStatement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStatementAccess().getAlternatives()); }
(rule__Statement__Alternatives)
{ after(grammarAccess.getStatementAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleReturnStatement
entryRuleReturnStatement 
:
{ before(grammarAccess.getReturnStatementRule()); }
	 ruleReturnStatement
{ after(grammarAccess.getReturnStatementRule()); } 
	 EOF 
;

// Rule ReturnStatement
ruleReturnStatement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getReturnStatementAccess().getGroup()); }
(rule__ReturnStatement__Group__0)
{ after(grammarAccess.getReturnStatementAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleWhileStatement
entryRuleWhileStatement 
:
{ before(grammarAccess.getWhileStatementRule()); }
	 ruleWhileStatement
{ after(grammarAccess.getWhileStatementRule()); } 
	 EOF 
;

// Rule WhileStatement
ruleWhileStatement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getWhileStatementAccess().getGroup()); }
(rule__WhileStatement__Group__0)
{ after(grammarAccess.getWhileStatementAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleInvariant
entryRuleInvariant 
:
{ before(grammarAccess.getInvariantRule()); }
	 ruleInvariant
{ after(grammarAccess.getInvariantRule()); } 
	 EOF 
;

// Rule Invariant
ruleInvariant
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getInvariantAccess().getGroup()); }
(rule__Invariant__Group__0)
{ after(grammarAccess.getInvariantAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleIfStatement
entryRuleIfStatement 
:
{ before(grammarAccess.getIfStatementRule()); }
	 ruleIfStatement
{ after(grammarAccess.getIfStatementRule()); } 
	 EOF 
;

// Rule IfStatement
ruleIfStatement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getIfStatementAccess().getGroup()); }
(rule__IfStatement__Group__0)
{ after(grammarAccess.getIfStatementAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFunctionDeclaration
entryRuleFunctionDeclaration 
:
{ before(grammarAccess.getFunctionDeclarationRule()); }
	 ruleFunctionDeclaration
{ after(grammarAccess.getFunctionDeclarationRule()); } 
	 EOF 
;

// Rule FunctionDeclaration
ruleFunctionDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getGroup()); }
(rule__FunctionDeclaration__Group__0)
{ after(grammarAccess.getFunctionDeclarationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRequire
entryRuleRequire 
:
{ before(grammarAccess.getRequireRule()); }
	 ruleRequire
{ after(grammarAccess.getRequireRule()); } 
	 EOF 
;

// Rule Require
ruleRequire
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getRequireAccess().getGroup()); }
(rule__Require__Group__0)
{ after(grammarAccess.getRequireAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEnsure
entryRuleEnsure 
:
{ before(grammarAccess.getEnsureRule()); }
	 ruleEnsure
{ after(grammarAccess.getEnsureRule()); } 
	 EOF 
;

// Rule Ensure
ruleEnsure
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEnsureAccess().getGroup()); }
(rule__Ensure__Group__0)
{ after(grammarAccess.getEnsureAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleParameter
entryRuleParameter 
:
{ before(grammarAccess.getParameterRule()); }
	 ruleParameter
{ after(grammarAccess.getParameterRule()); } 
	 EOF 
;

// Rule Parameter
ruleParameter
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getParameterAccess().getGroup()); }
(rule__Parameter__Group__0)
{ after(grammarAccess.getParameterAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleType
entryRuleType 
:
{ before(grammarAccess.getTypeRule()); }
	 ruleType
{ after(grammarAccess.getTypeRule()); } 
	 EOF 
;

// Rule Type
ruleType
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTypeAccess().getAlternatives()); }
(rule__Type__Alternatives)
{ after(grammarAccess.getTypeAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePrimitiveType
entryRulePrimitiveType 
:
{ before(grammarAccess.getPrimitiveTypeRule()); }
	 rulePrimitiveType
{ after(grammarAccess.getPrimitiveTypeRule()); } 
	 EOF 
;

// Rule PrimitiveType
rulePrimitiveType
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPrimitiveTypeAccess().getAlternatives()); }
(rule__PrimitiveType__Alternatives)
{ after(grammarAccess.getPrimitiveTypeAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleArrayType
entryRuleArrayType 
:
{ before(grammarAccess.getArrayTypeRule()); }
	 ruleArrayType
{ after(grammarAccess.getArrayTypeRule()); } 
	 EOF 
;

// Rule ArrayType
ruleArrayType
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getArrayTypeAccess().getGroup()); }
(rule__ArrayType__Group__0)
{ after(grammarAccess.getArrayTypeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFunctionCall
entryRuleFunctionCall 
:
{ before(grammarAccess.getFunctionCallRule()); }
	 ruleFunctionCall
{ after(grammarAccess.getFunctionCallRule()); } 
	 EOF 
;

// Rule FunctionCall
ruleFunctionCall
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFunctionCallAccess().getGroup()); }
(rule__FunctionCall__Group__0)
{ after(grammarAccess.getFunctionCallAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAnnotation
entryRuleAnnotation 
:
{ before(grammarAccess.getAnnotationRule()); }
	 ruleAnnotation
{ after(grammarAccess.getAnnotationRule()); } 
	 EOF 
;

// Rule Annotation
ruleAnnotation
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAnnotationAccess().getGroup()); }
(rule__Annotation__Group__0)
{ after(grammarAccess.getAnnotationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleQuantifiedExpression
entryRuleQuantifiedExpression 
:
{ before(grammarAccess.getQuantifiedExpressionRule()); }
	 ruleQuantifiedExpression
{ after(grammarAccess.getQuantifiedExpressionRule()); } 
	 EOF 
;

// Rule QuantifiedExpression
ruleQuantifiedExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getQuantifiedExpressionAccess().getGroup()); }
(rule__QuantifiedExpression__Group__0)
{ after(grammarAccess.getQuantifiedExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleVariableDeclaration
entryRuleVariableDeclaration 
:
{ before(grammarAccess.getVariableDeclarationRule()); }
	 ruleVariableDeclaration
{ after(grammarAccess.getVariableDeclarationRule()); } 
	 EOF 
;

// Rule VariableDeclaration
ruleVariableDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getVariableDeclarationAccess().getGroup()); }
(rule__VariableDeclaration__Group__0)
{ after(grammarAccess.getVariableDeclarationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAssignment
entryRuleAssignment 
:
{ before(grammarAccess.getAssignmentRule()); }
	 ruleAssignment
{ after(grammarAccess.getAssignmentRule()); } 
	 EOF 
;

// Rule Assignment
ruleAssignment
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAssignmentAccess().getGroup()); }
(rule__Assignment__Group__0)
{ after(grammarAccess.getAssignmentAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExpression
entryRuleExpression 
:
{ before(grammarAccess.getExpressionRule()); }
	 ruleExpression
{ after(grammarAccess.getExpressionRule()); } 
	 EOF 
;

// Rule Expression
ruleExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExpressionAccess().getAlternatives()); }
(rule__Expression__Alternatives)
{ after(grammarAccess.getExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBooleanOr
entryRuleBooleanOr 
:
{ before(grammarAccess.getBooleanOrRule()); }
	 ruleBooleanOr
{ after(grammarAccess.getBooleanOrRule()); } 
	 EOF 
;

// Rule BooleanOr
ruleBooleanOr
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBooleanOrAccess().getGroup()); }
(rule__BooleanOr__Group__0)
{ after(grammarAccess.getBooleanOrAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBooleanAnd
entryRuleBooleanAnd 
:
{ before(grammarAccess.getBooleanAndRule()); }
	 ruleBooleanAnd
{ after(grammarAccess.getBooleanAndRule()); } 
	 EOF 
;

// Rule BooleanAnd
ruleBooleanAnd
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBooleanAndAccess().getGroup()); }
(rule__BooleanAnd__Group__0)
{ after(grammarAccess.getBooleanAndAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEqualsComparison
entryRuleEqualsComparison 
:
{ before(grammarAccess.getEqualsComparisonRule()); }
	 ruleEqualsComparison
{ after(grammarAccess.getEqualsComparisonRule()); } 
	 EOF 
;

// Rule EqualsComparison
ruleEqualsComparison
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEqualsComparisonAccess().getGroup()); }
(rule__EqualsComparison__Group__0)
{ after(grammarAccess.getEqualsComparisonAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleComparison
entryRuleComparison 
:
{ before(grammarAccess.getComparisonRule()); }
	 ruleComparison
{ after(grammarAccess.getComparisonRule()); } 
	 EOF 
;

// Rule Comparison
ruleComparison
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getComparisonAccess().getGroup()); }
(rule__Comparison__Group__0)
{ after(grammarAccess.getComparisonAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAddition
entryRuleAddition 
:
{ before(grammarAccess.getAdditionRule()); }
	 ruleAddition
{ after(grammarAccess.getAdditionRule()); } 
	 EOF 
;

// Rule Addition
ruleAddition
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAdditionAccess().getGroup()); }
(rule__Addition__Group__0)
{ after(grammarAccess.getAdditionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMultiplication
entryRuleMultiplication 
:
{ before(grammarAccess.getMultiplicationRule()); }
	 ruleMultiplication
{ after(grammarAccess.getMultiplicationRule()); } 
	 EOF 
;

// Rule Multiplication
ruleMultiplication
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMultiplicationAccess().getGroup()); }
(rule__Multiplication__Group__0)
{ after(grammarAccess.getMultiplicationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleUnaryOperation
entryRuleUnaryOperation 
:
{ before(grammarAccess.getUnaryOperationRule()); }
	 ruleUnaryOperation
{ after(grammarAccess.getUnaryOperationRule()); } 
	 EOF 
;

// Rule UnaryOperation
ruleUnaryOperation
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getUnaryOperationAccess().getAlternatives()); }
(rule__UnaryOperation__Alternatives)
{ after(grammarAccess.getUnaryOperationAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAtomic
entryRuleAtomic 
:
{ before(grammarAccess.getAtomicRule()); }
	 ruleAtomic
{ after(grammarAccess.getAtomicRule()); } 
	 EOF 
;

// Rule Atomic
ruleAtomic
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAtomicAccess().getAlternatives()); }
(rule__Atomic__Alternatives)
{ after(grammarAccess.getAtomicAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleVariableReference
entryRuleVariableReference 
:
{ before(grammarAccess.getVariableReferenceRule()); }
	 ruleVariableReference
{ after(grammarAccess.getVariableReferenceRule()); } 
	 EOF 
;

// Rule VariableReference
ruleVariableReference
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getVariableReferenceAccess().getGroup()); }
(rule__VariableReference__Group__0)
{ after(grammarAccess.getVariableReferenceAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__Program__Alternatives_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProgramAccess().getAxiomsAssignment_2_0_0()); }
(rule__Program__AxiomsAssignment_2_0_0)
{ after(grammarAccess.getProgramAccess().getAxiomsAssignment_2_0_0()); }
)

    |(
{ before(grammarAccess.getProgramAccess().getFunctionDeclarationsAssignment_2_0_1()); }
(rule__Program__FunctionDeclarationsAssignment_2_0_1)
{ after(grammarAccess.getProgramAccess().getFunctionDeclarationsAssignment_2_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStatementAccess().getVariableDeclarationParserRuleCall_0()); }
	ruleVariableDeclaration
{ after(grammarAccess.getStatementAccess().getVariableDeclarationParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getStatementAccess().getAssignmentParserRuleCall_1()); }
	ruleAssignment
{ after(grammarAccess.getStatementAccess().getAssignmentParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getStatementAccess().getBracedBlockParserRuleCall_2()); }
	ruleBracedBlock
{ after(grammarAccess.getStatementAccess().getBracedBlockParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getStatementAccess().getAnnotationParserRuleCall_3()); }
	ruleAnnotation
{ after(grammarAccess.getStatementAccess().getAnnotationParserRuleCall_3()); }
)

    |(
{ before(grammarAccess.getStatementAccess().getIfStatementParserRuleCall_4()); }
	ruleIfStatement
{ after(grammarAccess.getStatementAccess().getIfStatementParserRuleCall_4()); }
)

    |(
{ before(grammarAccess.getStatementAccess().getWhileStatementParserRuleCall_5()); }
	ruleWhileStatement
{ after(grammarAccess.getStatementAccess().getWhileStatementParserRuleCall_5()); }
)

    |(
{ before(grammarAccess.getStatementAccess().getReturnStatementParserRuleCall_6()); }
	ruleReturnStatement
{ after(grammarAccess.getStatementAccess().getReturnStatementParserRuleCall_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__Alternatives_7
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getPreconditionsAssignment_7_0()); }
(rule__FunctionDeclaration__PreconditionsAssignment_7_0)
{ after(grammarAccess.getFunctionDeclarationAccess().getPreconditionsAssignment_7_0()); }
)

    |(
{ before(grammarAccess.getFunctionDeclarationAccess().getPostconditionsAssignment_7_1()); }
(rule__FunctionDeclaration__PostconditionsAssignment_7_1)
{ after(grammarAccess.getFunctionDeclarationAccess().getPostconditionsAssignment_7_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Type__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeAccess().getPrimitiveTypeParserRuleCall_0()); }
	rulePrimitiveType
{ after(grammarAccess.getTypeAccess().getPrimitiveTypeParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getTypeAccess().getArrayTypeParserRuleCall_1()); }
	ruleArrayType
{ after(grammarAccess.getTypeAccess().getArrayTypeParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PrimitiveType__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimitiveTypeAccess().getGroup_0()); }
(rule__PrimitiveType__Group_0__0)
{ after(grammarAccess.getPrimitiveTypeAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getPrimitiveTypeAccess().getGroup_1()); }
(rule__PrimitiveType__Group_1__0)
{ after(grammarAccess.getPrimitiveTypeAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Annotation__Alternatives_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnnotationAccess().getGroup_0_0()); }
(rule__Annotation__Group_0_0__0)
{ after(grammarAccess.getAnnotationAccess().getGroup_0_0()); }
)

    |(
{ before(grammarAccess.getAnnotationAccess().getGroup_0_1()); }
(rule__Annotation__Group_0_1__0)
{ after(grammarAccess.getAnnotationAccess().getGroup_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__QuantifiedExpression__Alternatives_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQuantifiedExpressionAccess().getGroup_0_0_0()); }
(rule__QuantifiedExpression__Group_0_0_0__0)
{ after(grammarAccess.getQuantifiedExpressionAccess().getGroup_0_0_0()); }
)

    |(
{ before(grammarAccess.getQuantifiedExpressionAccess().getGroup_0_0_1()); }
(rule__QuantifiedExpression__Group_0_0_1__0)
{ after(grammarAccess.getQuantifiedExpressionAccess().getGroup_0_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__QuantifiedExpression__Alternatives_0_0_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQuantifiedExpressionAccess().getForallKeyword_0_0_0_1_0()); }

	'forall' 

{ after(grammarAccess.getQuantifiedExpressionAccess().getForallKeyword_0_0_0_1_0()); }
)

    |(
{ before(grammarAccess.getQuantifiedExpressionAccess().getForAllKeyword_0_0_0_1_1()); }

	'\u2200' 

{ after(grammarAccess.getQuantifiedExpressionAccess().getForAllKeyword_0_0_0_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__QuantifiedExpression__Alternatives_0_0_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQuantifiedExpressionAccess().getExistsKeyword_0_0_1_1_0()); }

	'exists' 

{ after(grammarAccess.getQuantifiedExpressionAccess().getExistsKeyword_0_0_1_1_0()); }
)

    |(
{ before(grammarAccess.getQuantifiedExpressionAccess().getThereExistsKeyword_0_0_1_1_1()); }

	'\u2203' 

{ after(grammarAccess.getQuantifiedExpressionAccess().getThereExistsKeyword_0_0_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__QuantifiedExpression__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQuantifiedExpressionAccess().getExpressionAssignment_1_0()); }
(rule__QuantifiedExpression__ExpressionAssignment_1_0)
{ after(grammarAccess.getQuantifiedExpressionAccess().getExpressionAssignment_1_0()); }
)

    |(
{ before(grammarAccess.getQuantifiedExpressionAccess().getGroup_1_1()); }
(rule__QuantifiedExpression__Group_1_1__0)
{ after(grammarAccess.getQuantifiedExpressionAccess().getGroup_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionAccess().getQuantifiedExpressionParserRuleCall_0()); }
	ruleQuantifiedExpression
{ after(grammarAccess.getExpressionAccess().getQuantifiedExpressionParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getExpressionAccess().getBooleanOrParserRuleCall_1()); }
	ruleBooleanOr
{ after(grammarAccess.getExpressionAccess().getBooleanOrParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanOr__Alternatives_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanOrAccess().getLogicalOrKeyword_1_1_0()); }

	'\u2228' 

{ after(grammarAccess.getBooleanOrAccess().getLogicalOrKeyword_1_1_0()); }
)

    |(
{ before(grammarAccess.getBooleanOrAccess().getVerticalLineVerticalLineKeyword_1_1_1()); }

	'||' 

{ after(grammarAccess.getBooleanOrAccess().getVerticalLineVerticalLineKeyword_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanAnd__Alternatives_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanAndAccess().getLogicalAndKeyword_1_1_0()); }

	'\u2227' 

{ after(grammarAccess.getBooleanAndAccess().getLogicalAndKeyword_1_1_0()); }
)

    |(
{ before(grammarAccess.getBooleanAndAccess().getAmpersandAmpersandKeyword_1_1_1()); }

	'&&' 

{ after(grammarAccess.getBooleanAndAccess().getAmpersandAmpersandKeyword_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EqualsComparison__Alternatives_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualsComparisonAccess().getGroup_1_0_0()); }
(rule__EqualsComparison__Group_1_0_0__0)
{ after(grammarAccess.getEqualsComparisonAccess().getGroup_1_0_0()); }
)

    |(
{ before(grammarAccess.getEqualsComparisonAccess().getGroup_1_0_1()); }
(rule__EqualsComparison__Group_1_0_1__0)
{ after(grammarAccess.getEqualsComparisonAccess().getGroup_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EqualsComparison__Alternatives_1_0_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualsComparisonAccess().getExclamationMarkEqualsSignKeyword_1_0_1_1_0()); }

	'!=' 

{ after(grammarAccess.getEqualsComparisonAccess().getExclamationMarkEqualsSignKeyword_1_0_1_1_0()); }
)

    |(
{ before(grammarAccess.getEqualsComparisonAccess().getNotEqualToKeyword_1_0_1_1_1()); }

	'\u2260' 

{ after(grammarAccess.getEqualsComparisonAccess().getNotEqualToKeyword_1_0_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Alternatives_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonAccess().getGroup_1_0_0()); }
(rule__Comparison__Group_1_0_0__0)
{ after(grammarAccess.getComparisonAccess().getGroup_1_0_0()); }
)

    |(
{ before(grammarAccess.getComparisonAccess().getGroup_1_0_1()); }
(rule__Comparison__Group_1_0_1__0)
{ after(grammarAccess.getComparisonAccess().getGroup_1_0_1()); }
)

    |(
{ before(grammarAccess.getComparisonAccess().getGroup_1_0_2()); }
(rule__Comparison__Group_1_0_2__0)
{ after(grammarAccess.getComparisonAccess().getGroup_1_0_2()); }
)

    |(
{ before(grammarAccess.getComparisonAccess().getGroup_1_0_3()); }
(rule__Comparison__Group_1_0_3__0)
{ after(grammarAccess.getComparisonAccess().getGroup_1_0_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Alternatives_1_0_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonAccess().getLessThanSignEqualsSignKeyword_1_0_1_1_0()); }

	'<=' 

{ after(grammarAccess.getComparisonAccess().getLessThanSignEqualsSignKeyword_1_0_1_1_0()); }
)

    |(
{ before(grammarAccess.getComparisonAccess().getLessThanOrEqualToKeyword_1_0_1_1_1()); }

	'\u2264' 

{ after(grammarAccess.getComparisonAccess().getLessThanOrEqualToKeyword_1_0_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Alternatives_1_0_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonAccess().getGreaterThanSignEqualsSignKeyword_1_0_2_1_0()); }

	'>=' 

{ after(grammarAccess.getComparisonAccess().getGreaterThanSignEqualsSignKeyword_1_0_2_1_0()); }
)

    |(
{ before(grammarAccess.getComparisonAccess().getGreaterThanOrEqualToKeyword_1_0_2_1_1()); }

	'\u2265' 

{ after(grammarAccess.getComparisonAccess().getGreaterThanOrEqualToKeyword_1_0_2_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Alternatives_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditionAccess().getGroup_1_0_0()); }
(rule__Addition__Group_1_0_0__0)
{ after(grammarAccess.getAdditionAccess().getGroup_1_0_0()); }
)

    |(
{ before(grammarAccess.getAdditionAccess().getGroup_1_0_1()); }
(rule__Addition__Group_1_0_1__0)
{ after(grammarAccess.getAdditionAccess().getGroup_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Alternatives_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicationAccess().getGroup_1_0_0()); }
(rule__Multiplication__Group_1_0_0__0)
{ after(grammarAccess.getMultiplicationAccess().getGroup_1_0_0()); }
)

    |(
{ before(grammarAccess.getMultiplicationAccess().getGroup_1_0_1()); }
(rule__Multiplication__Group_1_0_1__0)
{ after(grammarAccess.getMultiplicationAccess().getGroup_1_0_1()); }
)

    |(
{ before(grammarAccess.getMultiplicationAccess().getGroup_1_0_2()); }
(rule__Multiplication__Group_1_0_2__0)
{ after(grammarAccess.getMultiplicationAccess().getGroup_1_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Alternatives_1_0_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicationAccess().getAsteriskKeyword_1_0_0_1_0()); }

	'*' 

{ after(grammarAccess.getMultiplicationAccess().getAsteriskKeyword_1_0_0_1_0()); }
)

    |(
{ before(grammarAccess.getMultiplicationAccess().getMiddleDotKeyword_1_0_0_1_1()); }

	'\u00B7' 

{ after(grammarAccess.getMultiplicationAccess().getMiddleDotKeyword_1_0_0_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Alternatives_1_0_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicationAccess().getSolidusKeyword_1_0_1_1_0()); }

	'/' 

{ after(grammarAccess.getMultiplicationAccess().getSolidusKeyword_1_0_1_1_0()); }
)

    |(
{ before(grammarAccess.getMultiplicationAccess().getDivisionSignKeyword_1_0_1_1_1()); }

	'\u00F7' 

{ after(grammarAccess.getMultiplicationAccess().getDivisionSignKeyword_1_0_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryOperation__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryOperationAccess().getAtomicParserRuleCall_0()); }
	ruleAtomic
{ after(grammarAccess.getUnaryOperationAccess().getAtomicParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getUnaryOperationAccess().getGroup_1()); }
(rule__UnaryOperation__Group_1__0)
{ after(grammarAccess.getUnaryOperationAccess().getGroup_1()); }
)

    |(
{ before(grammarAccess.getUnaryOperationAccess().getGroup_2()); }
(rule__UnaryOperation__Group_2__0)
{ after(grammarAccess.getUnaryOperationAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryOperation__Alternatives_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryOperationAccess().getGroup_1_0_0()); }
(rule__UnaryOperation__Group_1_0_0__0)
{ after(grammarAccess.getUnaryOperationAccess().getGroup_1_0_0()); }
)

    |(
{ before(grammarAccess.getUnaryOperationAccess().getGroup_1_0_1()); }
(rule__UnaryOperation__Group_1_0_1__0)
{ after(grammarAccess.getUnaryOperationAccess().getGroup_1_0_1()); }
)

    |(
{ before(grammarAccess.getUnaryOperationAccess().getGroup_1_0_2()); }
(rule__UnaryOperation__Group_1_0_2__0)
{ after(grammarAccess.getUnaryOperationAccess().getGroup_1_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryOperation__Alternatives_1_0_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryOperationAccess().getNotSignKeyword_1_0_2_1_0()); }

	'\u00AC' 

{ after(grammarAccess.getUnaryOperationAccess().getNotSignKeyword_1_0_2_1_0()); }
)

    |(
{ before(grammarAccess.getUnaryOperationAccess().getExclamationMarkKeyword_1_0_2_1_1()); }

	'!' 

{ after(grammarAccess.getUnaryOperationAccess().getExclamationMarkKeyword_1_0_2_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomicAccess().getFunctionCallParserRuleCall_0()); }
	ruleFunctionCall
{ after(grammarAccess.getAtomicAccess().getFunctionCallParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getAtomicAccess().getGroup_1()); }
(rule__Atomic__Group_1__0)
{ after(grammarAccess.getAtomicAccess().getGroup_1()); }
)

    |(
{ before(grammarAccess.getAtomicAccess().getGroup_2()); }
(rule__Atomic__Group_2__0)
{ after(grammarAccess.getAtomicAccess().getGroup_2()); }
)

    |(
{ before(grammarAccess.getAtomicAccess().getVariableReferenceParserRuleCall_3()); }
	ruleVariableReference
{ after(grammarAccess.getAtomicAccess().getVariableReferenceParserRuleCall_3()); }
)

    |(
{ before(grammarAccess.getAtomicAccess().getGroup_4()); }
(rule__Atomic__Group_4__0)
{ after(grammarAccess.getAtomicAccess().getGroup_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Program__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Program__Group__0__Impl
	rule__Program__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProgramAccess().getProgramAction_0()); }
(

)
{ after(grammarAccess.getProgramAccess().getProgramAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Program__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Program__Group__1__Impl
	rule__Program__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProgramAccess().getNLTerminalRuleCall_1()); }
(	RULE_NL)*
{ after(grammarAccess.getProgramAccess().getNLTerminalRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Program__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Program__Group__2__Impl
	rule__Program__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProgramAccess().getGroup_2()); }
(rule__Program__Group_2__0)*
{ after(grammarAccess.getProgramAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Program__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Program__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProgramAccess().getMainBlockAssignment_3()); }
(rule__Program__MainBlockAssignment_3)
{ after(grammarAccess.getProgramAccess().getMainBlockAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Program__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Program__Group_2__0__Impl
	rule__Program__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProgramAccess().getAlternatives_2_0()); }
(rule__Program__Alternatives_2_0)
{ after(grammarAccess.getProgramAccess().getAlternatives_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Program__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Program__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getProgramAccess().getNLTerminalRuleCall_2_1()); }
(	RULE_NL)
{ after(grammarAccess.getProgramAccess().getNLTerminalRuleCall_2_1()); }
)
(
{ before(grammarAccess.getProgramAccess().getNLTerminalRuleCall_2_1()); }
(	RULE_NL)*
{ after(grammarAccess.getProgramAccess().getNLTerminalRuleCall_2_1()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Axiom__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Axiom__Group__0__Impl
	rule__Axiom__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Axiom__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAxiomAccess().get_axiomKeyword_0()); }

	'_axiom' 

{ after(grammarAccess.getAxiomAccess().get_axiomKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Axiom__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Axiom__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Axiom__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAxiomAccess().getExpressionAssignment_1()); }
(rule__Axiom__ExpressionAssignment_1)
{ after(grammarAccess.getAxiomAccess().getExpressionAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Block__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Block__Group__0__Impl
	rule__Block__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockAccess().getBlockAction_0()); }
(

)
{ after(grammarAccess.getBlockAccess().getBlockAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Block__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Block__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockAccess().getGroup_1()); }
(rule__Block__Group_1__0)*
{ after(grammarAccess.getBlockAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Block__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Block__Group_1__0__Impl
	rule__Block__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockAccess().getStatementsAssignment_1_0()); }
(rule__Block__StatementsAssignment_1_0)
{ after(grammarAccess.getBlockAccess().getStatementsAssignment_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Block__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Block__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getBlockAccess().getNLTerminalRuleCall_1_1()); }
(	RULE_NL)
{ after(grammarAccess.getBlockAccess().getNLTerminalRuleCall_1_1()); }
)
(
{ before(grammarAccess.getBlockAccess().getNLTerminalRuleCall_1_1()); }
(	RULE_NL)*
{ after(grammarAccess.getBlockAccess().getNLTerminalRuleCall_1_1()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}






rule__BracedBlock__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BracedBlock__Group__0__Impl
	rule__BracedBlock__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BracedBlock__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBracedBlockAccess().getBlockAction_0()); }
(

)
{ after(grammarAccess.getBracedBlockAccess().getBlockAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BracedBlock__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BracedBlock__Group__1__Impl
	rule__BracedBlock__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BracedBlock__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBracedBlockAccess().getLeftCurlyBracketKeyword_1()); }

	'{' 

{ after(grammarAccess.getBracedBlockAccess().getLeftCurlyBracketKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BracedBlock__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BracedBlock__Group__2__Impl
	rule__BracedBlock__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__BracedBlock__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBracedBlockAccess().getNLTerminalRuleCall_2()); }
(	RULE_NL)*
{ after(grammarAccess.getBracedBlockAccess().getNLTerminalRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BracedBlock__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BracedBlock__Group__3__Impl
	rule__BracedBlock__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__BracedBlock__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBracedBlockAccess().getGroup_3()); }
(rule__BracedBlock__Group_3__0)*
{ after(grammarAccess.getBracedBlockAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BracedBlock__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BracedBlock__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BracedBlock__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBracedBlockAccess().getRightCurlyBracketKeyword_4()); }

	'}' 

{ after(grammarAccess.getBracedBlockAccess().getRightCurlyBracketKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__BracedBlock__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BracedBlock__Group_3__0__Impl
	rule__BracedBlock__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BracedBlock__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBracedBlockAccess().getStatementsAssignment_3_0()); }
(rule__BracedBlock__StatementsAssignment_3_0)
{ after(grammarAccess.getBracedBlockAccess().getStatementsAssignment_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BracedBlock__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BracedBlock__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BracedBlock__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getBracedBlockAccess().getNLTerminalRuleCall_3_1()); }
(	RULE_NL)
{ after(grammarAccess.getBracedBlockAccess().getNLTerminalRuleCall_3_1()); }
)
(
{ before(grammarAccess.getBracedBlockAccess().getNLTerminalRuleCall_3_1()); }
(	RULE_NL)*
{ after(grammarAccess.getBracedBlockAccess().getNLTerminalRuleCall_3_1()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ReturnStatement__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ReturnStatement__Group__0__Impl
	rule__ReturnStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ReturnStatement__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReturnStatementAccess().getReturnKeyword_0()); }

	'return' 

{ after(grammarAccess.getReturnStatementAccess().getReturnKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ReturnStatement__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ReturnStatement__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ReturnStatement__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReturnStatementAccess().getReturnValueAssignment_1()); }
(rule__ReturnStatement__ReturnValueAssignment_1)
{ after(grammarAccess.getReturnStatementAccess().getReturnValueAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__WhileStatement__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WhileStatement__Group__0__Impl
	rule__WhileStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileStatement__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhileStatementAccess().getWhileKeyword_0()); }

	'while' 

{ after(grammarAccess.getWhileStatementAccess().getWhileKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__WhileStatement__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WhileStatement__Group__1__Impl
	rule__WhileStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileStatement__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhileStatementAccess().getConditionAssignment_1()); }
(rule__WhileStatement__ConditionAssignment_1)
{ after(grammarAccess.getWhileStatementAccess().getConditionAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__WhileStatement__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WhileStatement__Group__2__Impl
	rule__WhileStatement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileStatement__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhileStatementAccess().getInvariantsAssignment_2()); }
(rule__WhileStatement__InvariantsAssignment_2)*
{ after(grammarAccess.getWhileStatementAccess().getInvariantsAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__WhileStatement__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WhileStatement__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileStatement__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhileStatementAccess().getBodyAssignment_3()); }
(rule__WhileStatement__BodyAssignment_3)
{ after(grammarAccess.getWhileStatementAccess().getBodyAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Invariant__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Invariant__Group__0__Impl
	rule__Invariant__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Invariant__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInvariantAccess().get_invariantKeyword_0()); }

	'_invariant' 

{ after(grammarAccess.getInvariantAccess().get_invariantKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Invariant__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Invariant__Group__1__Impl
	rule__Invariant__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Invariant__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInvariantAccess().getExpressionAssignment_1()); }
(rule__Invariant__ExpressionAssignment_1)
{ after(grammarAccess.getInvariantAccess().getExpressionAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Invariant__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Invariant__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Invariant__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getInvariantAccess().getNLTerminalRuleCall_2()); }
(	RULE_NL)
{ after(grammarAccess.getInvariantAccess().getNLTerminalRuleCall_2()); }
)
(
{ before(grammarAccess.getInvariantAccess().getNLTerminalRuleCall_2()); }
(	RULE_NL)*
{ after(grammarAccess.getInvariantAccess().getNLTerminalRuleCall_2()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}








rule__IfStatement__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfStatement__Group__0__Impl
	rule__IfStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfStatementAccess().getIfKeyword_0()); }

	'if' 

{ after(grammarAccess.getIfStatementAccess().getIfKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfStatement__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfStatement__Group__1__Impl
	rule__IfStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfStatementAccess().getConditionAssignment_1()); }
(rule__IfStatement__ConditionAssignment_1)
{ after(grammarAccess.getIfStatementAccess().getConditionAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfStatement__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfStatement__Group__2__Impl
	rule__IfStatement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfStatementAccess().getTrueBlockAssignment_2()); }
(rule__IfStatement__TrueBlockAssignment_2)
{ after(grammarAccess.getIfStatementAccess().getTrueBlockAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfStatement__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfStatement__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfStatementAccess().getGroup_3()); }
(rule__IfStatement__Group_3__0)?
{ after(grammarAccess.getIfStatementAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__IfStatement__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfStatement__Group_3__0__Impl
	rule__IfStatement__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfStatementAccess().getElseKeyword_3_0()); }

	'else' 

{ after(grammarAccess.getIfStatementAccess().getElseKeyword_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfStatement__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfStatement__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfStatementAccess().getFalseBlockAssignment_3_1()); }
(rule__IfStatement__FalseBlockAssignment_3_1)
{ after(grammarAccess.getIfStatementAccess().getFalseBlockAssignment_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__FunctionDeclaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionDeclaration__Group__0__Impl
	rule__FunctionDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getFunctionKeyword_0()); }

	'function' 

{ after(grammarAccess.getFunctionDeclarationAccess().getFunctionKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionDeclaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionDeclaration__Group__1__Impl
	rule__FunctionDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getReturnTypeAssignment_1()); }
(rule__FunctionDeclaration__ReturnTypeAssignment_1)
{ after(grammarAccess.getFunctionDeclarationAccess().getReturnTypeAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionDeclaration__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionDeclaration__Group__2__Impl
	rule__FunctionDeclaration__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getNameAssignment_2()); }
(rule__FunctionDeclaration__NameAssignment_2)
{ after(grammarAccess.getFunctionDeclarationAccess().getNameAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionDeclaration__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionDeclaration__Group__3__Impl
	rule__FunctionDeclaration__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getLeftParenthesisKeyword_3()); }

	'(' 

{ after(grammarAccess.getFunctionDeclarationAccess().getLeftParenthesisKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionDeclaration__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionDeclaration__Group__4__Impl
	rule__FunctionDeclaration__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getGroup_4()); }
(rule__FunctionDeclaration__Group_4__0)?
{ after(grammarAccess.getFunctionDeclarationAccess().getGroup_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionDeclaration__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionDeclaration__Group__5__Impl
	rule__FunctionDeclaration__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getRightParenthesisKeyword_5()); }

	')' 

{ after(grammarAccess.getFunctionDeclarationAccess().getRightParenthesisKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionDeclaration__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionDeclaration__Group__6__Impl
	rule__FunctionDeclaration__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getNLTerminalRuleCall_6()); }
(	RULE_NL)*
{ after(grammarAccess.getFunctionDeclarationAccess().getNLTerminalRuleCall_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionDeclaration__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionDeclaration__Group__7__Impl
	rule__FunctionDeclaration__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getAlternatives_7()); }
(rule__FunctionDeclaration__Alternatives_7)*
{ after(grammarAccess.getFunctionDeclarationAccess().getAlternatives_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionDeclaration__Group__8
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionDeclaration__Group__8__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__Group__8__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getBodyAssignment_8()); }
(rule__FunctionDeclaration__BodyAssignment_8)
{ after(grammarAccess.getFunctionDeclarationAccess().getBodyAssignment_8()); }
)

;
finally {
	restoreStackSize(stackSize);
}




















rule__FunctionDeclaration__Group_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionDeclaration__Group_4__0__Impl
	rule__FunctionDeclaration__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__Group_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getParametersAssignment_4_0()); }
(rule__FunctionDeclaration__ParametersAssignment_4_0)
{ after(grammarAccess.getFunctionDeclarationAccess().getParametersAssignment_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionDeclaration__Group_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionDeclaration__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__Group_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getGroup_4_1()); }
(rule__FunctionDeclaration__Group_4_1__0)*
{ after(grammarAccess.getFunctionDeclarationAccess().getGroup_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__FunctionDeclaration__Group_4_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionDeclaration__Group_4_1__0__Impl
	rule__FunctionDeclaration__Group_4_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__Group_4_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getCommaKeyword_4_1_0()); }

	',' 

{ after(grammarAccess.getFunctionDeclarationAccess().getCommaKeyword_4_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionDeclaration__Group_4_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionDeclaration__Group_4_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__Group_4_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getParametersAssignment_4_1_1()); }
(rule__FunctionDeclaration__ParametersAssignment_4_1_1)
{ after(grammarAccess.getFunctionDeclarationAccess().getParametersAssignment_4_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Require__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Require__Group__0__Impl
	rule__Require__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Require__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRequireAccess().get_requiresKeyword_0()); }

	'_requires' 

{ after(grammarAccess.getRequireAccess().get_requiresKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Require__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Require__Group__1__Impl
	rule__Require__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Require__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRequireAccess().getExpressionAssignment_1()); }
(rule__Require__ExpressionAssignment_1)
{ after(grammarAccess.getRequireAccess().getExpressionAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Require__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Require__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Require__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getRequireAccess().getNLTerminalRuleCall_2()); }
(	RULE_NL)
{ after(grammarAccess.getRequireAccess().getNLTerminalRuleCall_2()); }
)
(
{ before(grammarAccess.getRequireAccess().getNLTerminalRuleCall_2()); }
(	RULE_NL)*
{ after(grammarAccess.getRequireAccess().getNLTerminalRuleCall_2()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Ensure__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Ensure__Group__0__Impl
	rule__Ensure__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Ensure__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnsureAccess().get_ensuresKeyword_0()); }

	'_ensures' 

{ after(grammarAccess.getEnsureAccess().get_ensuresKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Ensure__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Ensure__Group__1__Impl
	rule__Ensure__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Ensure__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnsureAccess().getExpressionAssignment_1()); }
(rule__Ensure__ExpressionAssignment_1)
{ after(grammarAccess.getEnsureAccess().getExpressionAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Ensure__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Ensure__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Ensure__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getEnsureAccess().getNLTerminalRuleCall_2()); }
(	RULE_NL)
{ after(grammarAccess.getEnsureAccess().getNLTerminalRuleCall_2()); }
)
(
{ before(grammarAccess.getEnsureAccess().getNLTerminalRuleCall_2()); }
(	RULE_NL)*
{ after(grammarAccess.getEnsureAccess().getNLTerminalRuleCall_2()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Parameter__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Parameter__Group__0__Impl
	rule__Parameter__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterAccess().getVariableDeclarationAction_0()); }
(

)
{ after(grammarAccess.getParameterAccess().getVariableDeclarationAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Parameter__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Parameter__Group__1__Impl
	rule__Parameter__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterAccess().getTypeAssignment_1()); }
(rule__Parameter__TypeAssignment_1)
{ after(grammarAccess.getParameterAccess().getTypeAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Parameter__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Parameter__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterAccess().getNameAssignment_2()); }
(rule__Parameter__NameAssignment_2)
{ after(grammarAccess.getParameterAccess().getNameAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__PrimitiveType__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PrimitiveType__Group_0__0__Impl
	rule__PrimitiveType__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimitiveType__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimitiveTypeAccess().getIntegerTypeAction_0_0()); }
(

)
{ after(grammarAccess.getPrimitiveTypeAccess().getIntegerTypeAction_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PrimitiveType__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PrimitiveType__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimitiveType__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimitiveTypeAccess().getIntegerKeyword_0_1()); }

	'Integer' 

{ after(grammarAccess.getPrimitiveTypeAccess().getIntegerKeyword_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__PrimitiveType__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PrimitiveType__Group_1__0__Impl
	rule__PrimitiveType__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimitiveType__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimitiveTypeAccess().getBooleanTypeAction_1_0()); }
(

)
{ after(grammarAccess.getPrimitiveTypeAccess().getBooleanTypeAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PrimitiveType__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PrimitiveType__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimitiveType__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimitiveTypeAccess().getBooleanKeyword_1_1()); }

	'Boolean' 

{ after(grammarAccess.getPrimitiveTypeAccess().getBooleanKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ArrayType__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArrayType__Group__0__Impl
	rule__ArrayType__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayType__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayTypeAccess().getArrayTypeAction_0()); }
(

)
{ after(grammarAccess.getArrayTypeAccess().getArrayTypeAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ArrayType__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArrayType__Group__1__Impl
	rule__ArrayType__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayType__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayTypeAccess().getBaseTypeAssignment_1()); }
(rule__ArrayType__BaseTypeAssignment_1)
{ after(grammarAccess.getArrayTypeAccess().getBaseTypeAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ArrayType__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArrayType__Group__2__Impl
	rule__ArrayType__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayType__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayTypeAccess().getLeftSquareBracketKeyword_2()); }

	'[' 

{ after(grammarAccess.getArrayTypeAccess().getLeftSquareBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ArrayType__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArrayType__Group__3__Impl
	rule__ArrayType__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayType__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayTypeAccess().getSizeAssignment_3()); }
(rule__ArrayType__SizeAssignment_3)
{ after(grammarAccess.getArrayTypeAccess().getSizeAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ArrayType__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArrayType__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayType__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayTypeAccess().getRightSquareBracketKeyword_4()); }

	']' 

{ after(grammarAccess.getArrayTypeAccess().getRightSquareBracketKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__FunctionCall__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionCall__Group__0__Impl
	rule__FunctionCall__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionCallAccess().getFunctionAssignment_0()); }
(rule__FunctionCall__FunctionAssignment_0)
{ after(grammarAccess.getFunctionCallAccess().getFunctionAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionCall__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionCall__Group__1__Impl
	rule__FunctionCall__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionCallAccess().getLeftParenthesisKeyword_1()); }

	'(' 

{ after(grammarAccess.getFunctionCallAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionCall__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionCall__Group__2__Impl
	rule__FunctionCall__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionCallAccess().getActualsAssignment_2()); }
(rule__FunctionCall__ActualsAssignment_2)?
{ after(grammarAccess.getFunctionCallAccess().getActualsAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionCall__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionCall__Group__3__Impl
	rule__FunctionCall__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionCallAccess().getGroup_3()); }
(rule__FunctionCall__Group_3__0)*
{ after(grammarAccess.getFunctionCallAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionCall__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionCall__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionCallAccess().getRightParenthesisKeyword_4()); }

	')' 

{ after(grammarAccess.getFunctionCallAccess().getRightParenthesisKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__FunctionCall__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionCall__Group_3__0__Impl
	rule__FunctionCall__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionCallAccess().getCommaKeyword_3_0()); }

	',' 

{ after(grammarAccess.getFunctionCallAccess().getCommaKeyword_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionCall__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionCall__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionCallAccess().getActualsAssignment_3_1()); }
(rule__FunctionCall__ActualsAssignment_3_1)
{ after(grammarAccess.getFunctionCallAccess().getActualsAssignment_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Annotation__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Annotation__Group__0__Impl
	rule__Annotation__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Annotation__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnnotationAccess().getAlternatives_0()); }
(rule__Annotation__Alternatives_0)
{ after(grammarAccess.getAnnotationAccess().getAlternatives_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Annotation__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Annotation__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Annotation__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnnotationAccess().getExpressionAssignment_1()); }
(rule__Annotation__ExpressionAssignment_1)
{ after(grammarAccess.getAnnotationAccess().getExpressionAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Annotation__Group_0_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Annotation__Group_0_0__0__Impl
	rule__Annotation__Group_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Annotation__Group_0_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnnotationAccess().getAssertionAction_0_0_0()); }
(

)
{ after(grammarAccess.getAnnotationAccess().getAssertionAction_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Annotation__Group_0_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Annotation__Group_0_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Annotation__Group_0_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnnotationAccess().get_assertKeyword_0_0_1()); }

	'_assert' 

{ after(grammarAccess.getAnnotationAccess().get_assertKeyword_0_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Annotation__Group_0_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Annotation__Group_0_1__0__Impl
	rule__Annotation__Group_0_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Annotation__Group_0_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnnotationAccess().getAssumptionAction_0_1_0()); }
(

)
{ after(grammarAccess.getAnnotationAccess().getAssumptionAction_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Annotation__Group_0_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Annotation__Group_0_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Annotation__Group_0_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnnotationAccess().get_assumeKeyword_0_1_1()); }

	'_assume' 

{ after(grammarAccess.getAnnotationAccess().get_assumeKeyword_0_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__QuantifiedExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QuantifiedExpression__Group__0__Impl
	rule__QuantifiedExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QuantifiedExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQuantifiedExpressionAccess().getGroup_0()); }
(rule__QuantifiedExpression__Group_0__0)
{ after(grammarAccess.getQuantifiedExpressionAccess().getGroup_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QuantifiedExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QuantifiedExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QuantifiedExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQuantifiedExpressionAccess().getAlternatives_1()); }
(rule__QuantifiedExpression__Alternatives_1)
{ after(grammarAccess.getQuantifiedExpressionAccess().getAlternatives_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__QuantifiedExpression__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QuantifiedExpression__Group_0__0__Impl
	rule__QuantifiedExpression__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QuantifiedExpression__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQuantifiedExpressionAccess().getAlternatives_0_0()); }
(rule__QuantifiedExpression__Alternatives_0_0)
{ after(grammarAccess.getQuantifiedExpressionAccess().getAlternatives_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QuantifiedExpression__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QuantifiedExpression__Group_0__1__Impl
	rule__QuantifiedExpression__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__QuantifiedExpression__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQuantifiedExpressionAccess().getParameterAssignment_0_1()); }
(rule__QuantifiedExpression__ParameterAssignment_0_1)
{ after(grammarAccess.getQuantifiedExpressionAccess().getParameterAssignment_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QuantifiedExpression__Group_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QuantifiedExpression__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QuantifiedExpression__Group_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQuantifiedExpressionAccess().getGroup_0_2()); }
(rule__QuantifiedExpression__Group_0_2__0)?
{ after(grammarAccess.getQuantifiedExpressionAccess().getGroup_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__QuantifiedExpression__Group_0_0_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QuantifiedExpression__Group_0_0_0__0__Impl
	rule__QuantifiedExpression__Group_0_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QuantifiedExpression__Group_0_0_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQuantifiedExpressionAccess().getForAllQuantifierAction_0_0_0_0()); }
(

)
{ after(grammarAccess.getQuantifiedExpressionAccess().getForAllQuantifierAction_0_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QuantifiedExpression__Group_0_0_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QuantifiedExpression__Group_0_0_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QuantifiedExpression__Group_0_0_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQuantifiedExpressionAccess().getAlternatives_0_0_0_1()); }
(rule__QuantifiedExpression__Alternatives_0_0_0_1)
{ after(grammarAccess.getQuantifiedExpressionAccess().getAlternatives_0_0_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__QuantifiedExpression__Group_0_0_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QuantifiedExpression__Group_0_0_1__0__Impl
	rule__QuantifiedExpression__Group_0_0_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QuantifiedExpression__Group_0_0_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQuantifiedExpressionAccess().getExistsQuantifierAction_0_0_1_0()); }
(

)
{ after(grammarAccess.getQuantifiedExpressionAccess().getExistsQuantifierAction_0_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QuantifiedExpression__Group_0_0_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QuantifiedExpression__Group_0_0_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QuantifiedExpression__Group_0_0_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQuantifiedExpressionAccess().getAlternatives_0_0_1_1()); }
(rule__QuantifiedExpression__Alternatives_0_0_1_1)
{ after(grammarAccess.getQuantifiedExpressionAccess().getAlternatives_0_0_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__QuantifiedExpression__Group_0_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QuantifiedExpression__Group_0_2__0__Impl
	rule__QuantifiedExpression__Group_0_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QuantifiedExpression__Group_0_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQuantifiedExpressionAccess().getCommaKeyword_0_2_0()); }

	',' 

{ after(grammarAccess.getQuantifiedExpressionAccess().getCommaKeyword_0_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QuantifiedExpression__Group_0_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QuantifiedExpression__Group_0_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QuantifiedExpression__Group_0_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQuantifiedExpressionAccess().getConditionAssignment_0_2_1()); }
(rule__QuantifiedExpression__ConditionAssignment_0_2_1)
{ after(grammarAccess.getQuantifiedExpressionAccess().getConditionAssignment_0_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__QuantifiedExpression__Group_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QuantifiedExpression__Group_1_1__0__Impl
	rule__QuantifiedExpression__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QuantifiedExpression__Group_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQuantifiedExpressionAccess().getColonKeyword_1_1_0()); }

	':' 

{ after(grammarAccess.getQuantifiedExpressionAccess().getColonKeyword_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QuantifiedExpression__Group_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QuantifiedExpression__Group_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QuantifiedExpression__Group_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQuantifiedExpressionAccess().getExpressionAssignment_1_1_1()); }
(rule__QuantifiedExpression__ExpressionAssignment_1_1_1)
{ after(grammarAccess.getQuantifiedExpressionAccess().getExpressionAssignment_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__VariableDeclaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableDeclaration__Group__0__Impl
	rule__VariableDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclarationAccess().getVariableDeclarationAction_0()); }
(

)
{ after(grammarAccess.getVariableDeclarationAccess().getVariableDeclarationAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VariableDeclaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableDeclaration__Group__1__Impl
	rule__VariableDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclarationAccess().getTypeAssignment_1()); }
(rule__VariableDeclaration__TypeAssignment_1)
{ after(grammarAccess.getVariableDeclarationAccess().getTypeAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VariableDeclaration__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableDeclaration__Group__2__Impl
	rule__VariableDeclaration__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclarationAccess().getNameAssignment_2()); }
(rule__VariableDeclaration__NameAssignment_2)
{ after(grammarAccess.getVariableDeclarationAccess().getNameAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VariableDeclaration__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableDeclaration__Group__3__Impl
	rule__VariableDeclaration__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclarationAccess().getColonEqualsSignKeyword_3()); }

	':=' 

{ after(grammarAccess.getVariableDeclarationAccess().getColonEqualsSignKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VariableDeclaration__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableDeclaration__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclarationAccess().getInitialValueAssignment_4()); }
(rule__VariableDeclaration__InitialValueAssignment_4)
{ after(grammarAccess.getVariableDeclarationAccess().getInitialValueAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__Assignment__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Assignment__Group__0__Impl
	rule__Assignment__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentAccess().getVariableAssignment_0()); }
(rule__Assignment__VariableAssignment_0)
{ after(grammarAccess.getAssignmentAccess().getVariableAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Assignment__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Assignment__Group__1__Impl
	rule__Assignment__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentAccess().getColonEqualsSignKeyword_1()); }

	':=' 

{ after(grammarAccess.getAssignmentAccess().getColonEqualsSignKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Assignment__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Assignment__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentAccess().getValueAssignment_2()); }
(rule__Assignment__ValueAssignment_2)
{ after(grammarAccess.getAssignmentAccess().getValueAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__BooleanOr__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BooleanOr__Group__0__Impl
	rule__BooleanOr__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanOr__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanOrAccess().getBooleanAndParserRuleCall_0()); }
	ruleBooleanAnd
{ after(grammarAccess.getBooleanOrAccess().getBooleanAndParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BooleanOr__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BooleanOr__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanOr__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanOrAccess().getGroup_1()); }
(rule__BooleanOr__Group_1__0)?
{ after(grammarAccess.getBooleanOrAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__BooleanOr__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BooleanOr__Group_1__0__Impl
	rule__BooleanOr__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanOr__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanOrAccess().getDisjunctionLeftAction_1_0()); }
(

)
{ after(grammarAccess.getBooleanOrAccess().getDisjunctionLeftAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BooleanOr__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BooleanOr__Group_1__1__Impl
	rule__BooleanOr__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanOr__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanOrAccess().getAlternatives_1_1()); }
(rule__BooleanOr__Alternatives_1_1)
{ after(grammarAccess.getBooleanOrAccess().getAlternatives_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BooleanOr__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BooleanOr__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanOr__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanOrAccess().getRightAssignment_1_2()); }
(rule__BooleanOr__RightAssignment_1_2)
{ after(grammarAccess.getBooleanOrAccess().getRightAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__BooleanAnd__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BooleanAnd__Group__0__Impl
	rule__BooleanAnd__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanAnd__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanAndAccess().getEqualsComparisonParserRuleCall_0()); }
	ruleEqualsComparison
{ after(grammarAccess.getBooleanAndAccess().getEqualsComparisonParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BooleanAnd__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BooleanAnd__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanAnd__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanAndAccess().getGroup_1()); }
(rule__BooleanAnd__Group_1__0)?
{ after(grammarAccess.getBooleanAndAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__BooleanAnd__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BooleanAnd__Group_1__0__Impl
	rule__BooleanAnd__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanAnd__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanAndAccess().getConjunctionLeftAction_1_0()); }
(

)
{ after(grammarAccess.getBooleanAndAccess().getConjunctionLeftAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BooleanAnd__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BooleanAnd__Group_1__1__Impl
	rule__BooleanAnd__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanAnd__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanAndAccess().getAlternatives_1_1()); }
(rule__BooleanAnd__Alternatives_1_1)
{ after(grammarAccess.getBooleanAndAccess().getAlternatives_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BooleanAnd__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BooleanAnd__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanAnd__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanAndAccess().getRightAssignment_1_2()); }
(rule__BooleanAnd__RightAssignment_1_2)
{ after(grammarAccess.getBooleanAndAccess().getRightAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__EqualsComparison__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EqualsComparison__Group__0__Impl
	rule__EqualsComparison__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualsComparison__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualsComparisonAccess().getComparisonParserRuleCall_0()); }
	ruleComparison
{ after(grammarAccess.getEqualsComparisonAccess().getComparisonParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EqualsComparison__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EqualsComparison__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualsComparison__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualsComparisonAccess().getGroup_1()); }
(rule__EqualsComparison__Group_1__0)?
{ after(grammarAccess.getEqualsComparisonAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__EqualsComparison__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EqualsComparison__Group_1__0__Impl
	rule__EqualsComparison__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualsComparison__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualsComparisonAccess().getAlternatives_1_0()); }
(rule__EqualsComparison__Alternatives_1_0)
{ after(grammarAccess.getEqualsComparisonAccess().getAlternatives_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EqualsComparison__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EqualsComparison__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualsComparison__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualsComparisonAccess().getRightAssignment_1_1()); }
(rule__EqualsComparison__RightAssignment_1_1)
{ after(grammarAccess.getEqualsComparisonAccess().getRightAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__EqualsComparison__Group_1_0_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EqualsComparison__Group_1_0_0__0__Impl
	rule__EqualsComparison__Group_1_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualsComparison__Group_1_0_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualsComparisonAccess().getEqualLeftAction_1_0_0_0()); }
(

)
{ after(grammarAccess.getEqualsComparisonAccess().getEqualLeftAction_1_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EqualsComparison__Group_1_0_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EqualsComparison__Group_1_0_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualsComparison__Group_1_0_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualsComparisonAccess().getEqualsSignKeyword_1_0_0_1()); }

	'=' 

{ after(grammarAccess.getEqualsComparisonAccess().getEqualsSignKeyword_1_0_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__EqualsComparison__Group_1_0_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EqualsComparison__Group_1_0_1__0__Impl
	rule__EqualsComparison__Group_1_0_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualsComparison__Group_1_0_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualsComparisonAccess().getUnequalLeftAction_1_0_1_0()); }
(

)
{ after(grammarAccess.getEqualsComparisonAccess().getUnequalLeftAction_1_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EqualsComparison__Group_1_0_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EqualsComparison__Group_1_0_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualsComparison__Group_1_0_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualsComparisonAccess().getAlternatives_1_0_1_1()); }
(rule__EqualsComparison__Alternatives_1_0_1_1)
{ after(grammarAccess.getEqualsComparisonAccess().getAlternatives_1_0_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Comparison__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Comparison__Group__0__Impl
	rule__Comparison__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonAccess().getAdditionParserRuleCall_0()); }
	ruleAddition
{ after(grammarAccess.getComparisonAccess().getAdditionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Comparison__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Comparison__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonAccess().getGroup_1()); }
(rule__Comparison__Group_1__0)?
{ after(grammarAccess.getComparisonAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Comparison__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Comparison__Group_1__0__Impl
	rule__Comparison__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonAccess().getAlternatives_1_0()); }
(rule__Comparison__Alternatives_1_0)
{ after(grammarAccess.getComparisonAccess().getAlternatives_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Comparison__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Comparison__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonAccess().getRightAssignment_1_1()); }
(rule__Comparison__RightAssignment_1_1)
{ after(grammarAccess.getComparisonAccess().getRightAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Comparison__Group_1_0_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Comparison__Group_1_0_0__0__Impl
	rule__Comparison__Group_1_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group_1_0_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonAccess().getLessLeftAction_1_0_0_0()); }
(

)
{ after(grammarAccess.getComparisonAccess().getLessLeftAction_1_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Comparison__Group_1_0_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Comparison__Group_1_0_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group_1_0_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonAccess().getLessThanSignKeyword_1_0_0_1()); }

	'<' 

{ after(grammarAccess.getComparisonAccess().getLessThanSignKeyword_1_0_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Comparison__Group_1_0_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Comparison__Group_1_0_1__0__Impl
	rule__Comparison__Group_1_0_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group_1_0_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonAccess().getLessOrEqualLeftAction_1_0_1_0()); }
(

)
{ after(grammarAccess.getComparisonAccess().getLessOrEqualLeftAction_1_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Comparison__Group_1_0_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Comparison__Group_1_0_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group_1_0_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonAccess().getAlternatives_1_0_1_1()); }
(rule__Comparison__Alternatives_1_0_1_1)
{ after(grammarAccess.getComparisonAccess().getAlternatives_1_0_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Comparison__Group_1_0_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Comparison__Group_1_0_2__0__Impl
	rule__Comparison__Group_1_0_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group_1_0_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonAccess().getGreaterOrEqualLeftAction_1_0_2_0()); }
(

)
{ after(grammarAccess.getComparisonAccess().getGreaterOrEqualLeftAction_1_0_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Comparison__Group_1_0_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Comparison__Group_1_0_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group_1_0_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonAccess().getAlternatives_1_0_2_1()); }
(rule__Comparison__Alternatives_1_0_2_1)
{ after(grammarAccess.getComparisonAccess().getAlternatives_1_0_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Comparison__Group_1_0_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Comparison__Group_1_0_3__0__Impl
	rule__Comparison__Group_1_0_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group_1_0_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonAccess().getGreaterLeftAction_1_0_3_0()); }
(

)
{ after(grammarAccess.getComparisonAccess().getGreaterLeftAction_1_0_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Comparison__Group_1_0_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Comparison__Group_1_0_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group_1_0_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonAccess().getGreaterThanSignKeyword_1_0_3_1()); }

	'>' 

{ after(grammarAccess.getComparisonAccess().getGreaterThanSignKeyword_1_0_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Addition__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Addition__Group__0__Impl
	rule__Addition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditionAccess().getMultiplicationParserRuleCall_0()); }
	ruleMultiplication
{ after(grammarAccess.getAdditionAccess().getMultiplicationParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Addition__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Addition__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditionAccess().getGroup_1()); }
(rule__Addition__Group_1__0)*
{ after(grammarAccess.getAdditionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Addition__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Addition__Group_1__0__Impl
	rule__Addition__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditionAccess().getAlternatives_1_0()); }
(rule__Addition__Alternatives_1_0)
{ after(grammarAccess.getAdditionAccess().getAlternatives_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Addition__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Addition__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditionAccess().getRightAssignment_1_1()); }
(rule__Addition__RightAssignment_1_1)
{ after(grammarAccess.getAdditionAccess().getRightAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Addition__Group_1_0_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Addition__Group_1_0_0__0__Impl
	rule__Addition__Group_1_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group_1_0_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditionAccess().getAdditionLeftAction_1_0_0_0()); }
(

)
{ after(grammarAccess.getAdditionAccess().getAdditionLeftAction_1_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Addition__Group_1_0_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Addition__Group_1_0_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group_1_0_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditionAccess().getPlusSignKeyword_1_0_0_1()); }

	'+' 

{ after(grammarAccess.getAdditionAccess().getPlusSignKeyword_1_0_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Addition__Group_1_0_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Addition__Group_1_0_1__0__Impl
	rule__Addition__Group_1_0_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group_1_0_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditionAccess().getSubtractionLeftAction_1_0_1_0()); }
(

)
{ after(grammarAccess.getAdditionAccess().getSubtractionLeftAction_1_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Addition__Group_1_0_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Addition__Group_1_0_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group_1_0_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditionAccess().getHyphenMinusKeyword_1_0_1_1()); }

	'-' 

{ after(grammarAccess.getAdditionAccess().getHyphenMinusKeyword_1_0_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Multiplication__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Multiplication__Group__0__Impl
	rule__Multiplication__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicationAccess().getUnaryOperationParserRuleCall_0()); }
	ruleUnaryOperation
{ after(grammarAccess.getMultiplicationAccess().getUnaryOperationParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Multiplication__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Multiplication__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicationAccess().getGroup_1()); }
(rule__Multiplication__Group_1__0)*
{ after(grammarAccess.getMultiplicationAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Multiplication__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Multiplication__Group_1__0__Impl
	rule__Multiplication__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicationAccess().getAlternatives_1_0()); }
(rule__Multiplication__Alternatives_1_0)
{ after(grammarAccess.getMultiplicationAccess().getAlternatives_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Multiplication__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Multiplication__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicationAccess().getRightAssignment_1_1()); }
(rule__Multiplication__RightAssignment_1_1)
{ after(grammarAccess.getMultiplicationAccess().getRightAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Multiplication__Group_1_0_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Multiplication__Group_1_0_0__0__Impl
	rule__Multiplication__Group_1_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group_1_0_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicationAccess().getMultiplicationLeftAction_1_0_0_0()); }
(

)
{ after(grammarAccess.getMultiplicationAccess().getMultiplicationLeftAction_1_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Multiplication__Group_1_0_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Multiplication__Group_1_0_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group_1_0_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicationAccess().getAlternatives_1_0_0_1()); }
(rule__Multiplication__Alternatives_1_0_0_1)
{ after(grammarAccess.getMultiplicationAccess().getAlternatives_1_0_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Multiplication__Group_1_0_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Multiplication__Group_1_0_1__0__Impl
	rule__Multiplication__Group_1_0_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group_1_0_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicationAccess().getDivisionLeftAction_1_0_1_0()); }
(

)
{ after(grammarAccess.getMultiplicationAccess().getDivisionLeftAction_1_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Multiplication__Group_1_0_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Multiplication__Group_1_0_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group_1_0_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicationAccess().getAlternatives_1_0_1_1()); }
(rule__Multiplication__Alternatives_1_0_1_1)
{ after(grammarAccess.getMultiplicationAccess().getAlternatives_1_0_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Multiplication__Group_1_0_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Multiplication__Group_1_0_2__0__Impl
	rule__Multiplication__Group_1_0_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group_1_0_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicationAccess().getModulusLeftAction_1_0_2_0()); }
(

)
{ after(grammarAccess.getMultiplicationAccess().getModulusLeftAction_1_0_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Multiplication__Group_1_0_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Multiplication__Group_1_0_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group_1_0_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicationAccess().getPercentSignKeyword_1_0_2_1()); }

	'%' 

{ after(grammarAccess.getMultiplicationAccess().getPercentSignKeyword_1_0_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__UnaryOperation__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnaryOperation__Group_1__0__Impl
	rule__UnaryOperation__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryOperation__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryOperationAccess().getAlternatives_1_0()); }
(rule__UnaryOperation__Alternatives_1_0)
{ after(grammarAccess.getUnaryOperationAccess().getAlternatives_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UnaryOperation__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnaryOperation__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryOperation__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryOperationAccess().getOperandAssignment_1_1()); }
(rule__UnaryOperation__OperandAssignment_1_1)
{ after(grammarAccess.getUnaryOperationAccess().getOperandAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__UnaryOperation__Group_1_0_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnaryOperation__Group_1_0_0__0__Impl
	rule__UnaryOperation__Group_1_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryOperation__Group_1_0_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryOperationAccess().getPlusAction_1_0_0_0()); }
(

)
{ after(grammarAccess.getUnaryOperationAccess().getPlusAction_1_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UnaryOperation__Group_1_0_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnaryOperation__Group_1_0_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryOperation__Group_1_0_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryOperationAccess().getHyphenMinusKeyword_1_0_0_1()); }

	'-' 

{ after(grammarAccess.getUnaryOperationAccess().getHyphenMinusKeyword_1_0_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__UnaryOperation__Group_1_0_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnaryOperation__Group_1_0_1__0__Impl
	rule__UnaryOperation__Group_1_0_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryOperation__Group_1_0_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryOperationAccess().getMinusAction_1_0_1_0()); }
(

)
{ after(grammarAccess.getUnaryOperationAccess().getMinusAction_1_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UnaryOperation__Group_1_0_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnaryOperation__Group_1_0_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryOperation__Group_1_0_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryOperationAccess().getPlusSignKeyword_1_0_1_1()); }

	'+' 

{ after(grammarAccess.getUnaryOperationAccess().getPlusSignKeyword_1_0_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__UnaryOperation__Group_1_0_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnaryOperation__Group_1_0_2__0__Impl
	rule__UnaryOperation__Group_1_0_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryOperation__Group_1_0_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryOperationAccess().getNegationAction_1_0_2_0()); }
(

)
{ after(grammarAccess.getUnaryOperationAccess().getNegationAction_1_0_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UnaryOperation__Group_1_0_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnaryOperation__Group_1_0_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryOperation__Group_1_0_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryOperationAccess().getAlternatives_1_0_2_1()); }
(rule__UnaryOperation__Alternatives_1_0_2_1)
{ after(grammarAccess.getUnaryOperationAccess().getAlternatives_1_0_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__UnaryOperation__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnaryOperation__Group_2__0__Impl
	rule__UnaryOperation__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryOperation__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryOperationAccess().getArrayLengthAction_2_0()); }
(

)
{ after(grammarAccess.getUnaryOperationAccess().getArrayLengthAction_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UnaryOperation__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnaryOperation__Group_2__1__Impl
	rule__UnaryOperation__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryOperation__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryOperationAccess().getLengthKeyword_2_1()); }

	'length' 

{ after(grammarAccess.getUnaryOperationAccess().getLengthKeyword_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UnaryOperation__Group_2__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnaryOperation__Group_2__2__Impl
	rule__UnaryOperation__Group_2__3
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryOperation__Group_2__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryOperationAccess().getLeftParenthesisKeyword_2_2()); }

	'(' 

{ after(grammarAccess.getUnaryOperationAccess().getLeftParenthesisKeyword_2_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UnaryOperation__Group_2__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnaryOperation__Group_2__3__Impl
	rule__UnaryOperation__Group_2__4
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryOperation__Group_2__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryOperationAccess().getOperandAssignment_2_3()); }
(rule__UnaryOperation__OperandAssignment_2_3)
{ after(grammarAccess.getUnaryOperationAccess().getOperandAssignment_2_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UnaryOperation__Group_2__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnaryOperation__Group_2__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryOperation__Group_2__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryOperationAccess().getRightParenthesisKeyword_2_4()); }

	')' 

{ after(grammarAccess.getUnaryOperationAccess().getRightParenthesisKeyword_2_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__Atomic__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Atomic__Group_1__0__Impl
	rule__Atomic__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomicAccess().getIntegerLiteralAction_1_0()); }
(

)
{ after(grammarAccess.getAtomicAccess().getIntegerLiteralAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Atomic__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Atomic__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomicAccess().getValueAssignment_1_1()); }
(rule__Atomic__ValueAssignment_1_1)
{ after(grammarAccess.getAtomicAccess().getValueAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Atomic__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Atomic__Group_2__0__Impl
	rule__Atomic__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomicAccess().getBooleanLiteralAction_2_0()); }
(

)
{ after(grammarAccess.getAtomicAccess().getBooleanLiteralAction_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Atomic__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Atomic__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomicAccess().getValueAssignment_2_1()); }
(rule__Atomic__ValueAssignment_2_1)
{ after(grammarAccess.getAtomicAccess().getValueAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Atomic__Group_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Atomic__Group_4__0__Impl
	rule__Atomic__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__Group_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomicAccess().getLeftParenthesisKeyword_4_0()); }

	'(' 

{ after(grammarAccess.getAtomicAccess().getLeftParenthesisKeyword_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Atomic__Group_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Atomic__Group_4__1__Impl
	rule__Atomic__Group_4__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__Group_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomicAccess().getExpressionParserRuleCall_4_1()); }
	ruleExpression
{ after(grammarAccess.getAtomicAccess().getExpressionParserRuleCall_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Atomic__Group_4__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Atomic__Group_4__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__Group_4__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomicAccess().getRightParenthesisKeyword_4_2()); }

	')' 

{ after(grammarAccess.getAtomicAccess().getRightParenthesisKeyword_4_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__VariableReference__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableReference__Group__0__Impl
	rule__VariableReference__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableReference__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableReferenceAccess().getVariableReferenceAction_0()); }
(

)
{ after(grammarAccess.getVariableReferenceAccess().getVariableReferenceAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VariableReference__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableReference__Group__1__Impl
	rule__VariableReference__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableReference__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableReferenceAccess().getVariableAssignment_1()); }
(rule__VariableReference__VariableAssignment_1)
{ after(grammarAccess.getVariableReferenceAccess().getVariableAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VariableReference__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableReference__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableReference__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableReferenceAccess().getGroup_2()); }
(rule__VariableReference__Group_2__0)?
{ after(grammarAccess.getVariableReferenceAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__VariableReference__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableReference__Group_2__0__Impl
	rule__VariableReference__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableReference__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableReferenceAccess().getLeftSquareBracketKeyword_2_0()); }

	'[' 

{ after(grammarAccess.getVariableReferenceAccess().getLeftSquareBracketKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VariableReference__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableReference__Group_2__1__Impl
	rule__VariableReference__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableReference__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableReferenceAccess().getIndexAssignment_2_1()); }
(rule__VariableReference__IndexAssignment_2_1)
{ after(grammarAccess.getVariableReferenceAccess().getIndexAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VariableReference__Group_2__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableReference__Group_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableReference__Group_2__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableReferenceAccess().getRightSquareBracketKeyword_2_2()); }

	']' 

{ after(grammarAccess.getVariableReferenceAccess().getRightSquareBracketKeyword_2_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}









rule__Program__AxiomsAssignment_2_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProgramAccess().getAxiomsAxiomParserRuleCall_2_0_0_0()); }
	ruleAxiom{ after(grammarAccess.getProgramAccess().getAxiomsAxiomParserRuleCall_2_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Program__FunctionDeclarationsAssignment_2_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProgramAccess().getFunctionDeclarationsFunctionDeclarationParserRuleCall_2_0_1_0()); }
	ruleFunctionDeclaration{ after(grammarAccess.getProgramAccess().getFunctionDeclarationsFunctionDeclarationParserRuleCall_2_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Program__MainBlockAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProgramAccess().getMainBlockBlockParserRuleCall_3_0()); }
	ruleBlock{ after(grammarAccess.getProgramAccess().getMainBlockBlockParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Axiom__ExpressionAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAxiomAccess().getExpressionExpressionParserRuleCall_1_0()); }
	ruleExpression{ after(grammarAccess.getAxiomAccess().getExpressionExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Block__StatementsAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockAccess().getStatementsStatementParserRuleCall_1_0_0()); }
	ruleStatement{ after(grammarAccess.getBlockAccess().getStatementsStatementParserRuleCall_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BracedBlock__StatementsAssignment_3_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBracedBlockAccess().getStatementsStatementParserRuleCall_3_0_0()); }
	ruleStatement{ after(grammarAccess.getBracedBlockAccess().getStatementsStatementParserRuleCall_3_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ReturnStatement__ReturnValueAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReturnStatementAccess().getReturnValueExpressionParserRuleCall_1_0()); }
	ruleExpression{ after(grammarAccess.getReturnStatementAccess().getReturnValueExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__WhileStatement__ConditionAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhileStatementAccess().getConditionExpressionParserRuleCall_1_0()); }
	ruleExpression{ after(grammarAccess.getWhileStatementAccess().getConditionExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__WhileStatement__InvariantsAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhileStatementAccess().getInvariantsInvariantParserRuleCall_2_0()); }
	ruleInvariant{ after(grammarAccess.getWhileStatementAccess().getInvariantsInvariantParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__WhileStatement__BodyAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhileStatementAccess().getBodyBracedBlockParserRuleCall_3_0()); }
	ruleBracedBlock{ after(grammarAccess.getWhileStatementAccess().getBodyBracedBlockParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Invariant__ExpressionAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInvariantAccess().getExpressionExpressionParserRuleCall_1_0()); }
	ruleExpression{ after(grammarAccess.getInvariantAccess().getExpressionExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__ConditionAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfStatementAccess().getConditionExpressionParserRuleCall_1_0()); }
	ruleExpression{ after(grammarAccess.getIfStatementAccess().getConditionExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__TrueBlockAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfStatementAccess().getTrueBlockBracedBlockParserRuleCall_2_0()); }
	ruleBracedBlock{ after(grammarAccess.getIfStatementAccess().getTrueBlockBracedBlockParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__FalseBlockAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfStatementAccess().getFalseBlockBracedBlockParserRuleCall_3_1_0()); }
	ruleBracedBlock{ after(grammarAccess.getIfStatementAccess().getFalseBlockBracedBlockParserRuleCall_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__ReturnTypeAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getReturnTypeTypeParserRuleCall_1_0()); }
	ruleType{ after(grammarAccess.getFunctionDeclarationAccess().getReturnTypeTypeParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__NameAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getNameIDTerminalRuleCall_2_0()); }
	RULE_ID{ after(grammarAccess.getFunctionDeclarationAccess().getNameIDTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__ParametersAssignment_4_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getParametersParameterParserRuleCall_4_0_0()); }
	ruleParameter{ after(grammarAccess.getFunctionDeclarationAccess().getParametersParameterParserRuleCall_4_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__ParametersAssignment_4_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getParametersParameterParserRuleCall_4_1_1_0()); }
	ruleParameter{ after(grammarAccess.getFunctionDeclarationAccess().getParametersParameterParserRuleCall_4_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__PreconditionsAssignment_7_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getPreconditionsRequireParserRuleCall_7_0_0()); }
	ruleRequire{ after(grammarAccess.getFunctionDeclarationAccess().getPreconditionsRequireParserRuleCall_7_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__PostconditionsAssignment_7_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getPostconditionsEnsureParserRuleCall_7_1_0()); }
	ruleEnsure{ after(grammarAccess.getFunctionDeclarationAccess().getPostconditionsEnsureParserRuleCall_7_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__BodyAssignment_8
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getBodyBracedBlockParserRuleCall_8_0()); }
	ruleBracedBlock{ after(grammarAccess.getFunctionDeclarationAccess().getBodyBracedBlockParserRuleCall_8_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Require__ExpressionAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRequireAccess().getExpressionExpressionParserRuleCall_1_0()); }
	ruleExpression{ after(grammarAccess.getRequireAccess().getExpressionExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Ensure__ExpressionAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnsureAccess().getExpressionExpressionParserRuleCall_1_0()); }
	ruleExpression{ after(grammarAccess.getEnsureAccess().getExpressionExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__TypeAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterAccess().getTypeTypeParserRuleCall_1_0()); }
	ruleType{ after(grammarAccess.getParameterAccess().getTypeTypeParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__NameAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterAccess().getNameIDTerminalRuleCall_2_0()); }
	RULE_ID{ after(grammarAccess.getParameterAccess().getNameIDTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayType__BaseTypeAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayTypeAccess().getBaseTypePrimitiveTypeParserRuleCall_1_0()); }
	rulePrimitiveType{ after(grammarAccess.getArrayTypeAccess().getBaseTypePrimitiveTypeParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayType__SizeAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayTypeAccess().getSizeExpressionParserRuleCall_3_0()); }
	ruleExpression{ after(grammarAccess.getArrayTypeAccess().getSizeExpressionParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__FunctionAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionCallAccess().getFunctionFunctionDeclarationCrossReference_0_0()); }
(
{ before(grammarAccess.getFunctionCallAccess().getFunctionFunctionDeclarationIDTerminalRuleCall_0_0_1()); }
	RULE_ID{ after(grammarAccess.getFunctionCallAccess().getFunctionFunctionDeclarationIDTerminalRuleCall_0_0_1()); }
)
{ after(grammarAccess.getFunctionCallAccess().getFunctionFunctionDeclarationCrossReference_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__ActualsAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionCallAccess().getActualsExpressionParserRuleCall_2_0()); }
	ruleExpression{ after(grammarAccess.getFunctionCallAccess().getActualsExpressionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__ActualsAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionCallAccess().getActualsExpressionParserRuleCall_3_1_0()); }
	ruleExpression{ after(grammarAccess.getFunctionCallAccess().getActualsExpressionParserRuleCall_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Annotation__ExpressionAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnnotationAccess().getExpressionExpressionParserRuleCall_1_0()); }
	ruleExpression{ after(grammarAccess.getAnnotationAccess().getExpressionExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__QuantifiedExpression__ParameterAssignment_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQuantifiedExpressionAccess().getParameterParameterParserRuleCall_0_1_0()); }
	ruleParameter{ after(grammarAccess.getQuantifiedExpressionAccess().getParameterParameterParserRuleCall_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__QuantifiedExpression__ConditionAssignment_0_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQuantifiedExpressionAccess().getConditionExpressionParserRuleCall_0_2_1_0()); }
	ruleExpression{ after(grammarAccess.getQuantifiedExpressionAccess().getConditionExpressionParserRuleCall_0_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__QuantifiedExpression__ExpressionAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQuantifiedExpressionAccess().getExpressionQuantifiedExpressionParserRuleCall_1_0_0()); }
	ruleQuantifiedExpression{ after(grammarAccess.getQuantifiedExpressionAccess().getExpressionQuantifiedExpressionParserRuleCall_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__QuantifiedExpression__ExpressionAssignment_1_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQuantifiedExpressionAccess().getExpressionExpressionParserRuleCall_1_1_1_0()); }
	ruleExpression{ after(grammarAccess.getQuantifiedExpressionAccess().getExpressionExpressionParserRuleCall_1_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__TypeAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclarationAccess().getTypeTypeParserRuleCall_1_0()); }
	ruleType{ after(grammarAccess.getVariableDeclarationAccess().getTypeTypeParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__NameAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclarationAccess().getNameIDTerminalRuleCall_2_0()); }
	RULE_ID{ after(grammarAccess.getVariableDeclarationAccess().getNameIDTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__InitialValueAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclarationAccess().getInitialValueExpressionParserRuleCall_4_0()); }
	ruleExpression{ after(grammarAccess.getVariableDeclarationAccess().getInitialValueExpressionParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__VariableAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentAccess().getVariableVariableReferenceParserRuleCall_0_0()); }
	ruleVariableReference{ after(grammarAccess.getAssignmentAccess().getVariableVariableReferenceParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__ValueAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentAccess().getValueExpressionParserRuleCall_2_0()); }
	ruleExpression{ after(grammarAccess.getAssignmentAccess().getValueExpressionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanOr__RightAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanOrAccess().getRightBooleanAndParserRuleCall_1_2_0()); }
	ruleBooleanAnd{ after(grammarAccess.getBooleanOrAccess().getRightBooleanAndParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanAnd__RightAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanAndAccess().getRightEqualsComparisonParserRuleCall_1_2_0()); }
	ruleEqualsComparison{ after(grammarAccess.getBooleanAndAccess().getRightEqualsComparisonParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EqualsComparison__RightAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualsComparisonAccess().getRightComparisonParserRuleCall_1_1_0()); }
	ruleComparison{ after(grammarAccess.getEqualsComparisonAccess().getRightComparisonParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__RightAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonAccess().getRightAdditionParserRuleCall_1_1_0()); }
	ruleAddition{ after(grammarAccess.getComparisonAccess().getRightAdditionParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__RightAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditionAccess().getRightMultiplicationParserRuleCall_1_1_0()); }
	ruleMultiplication{ after(grammarAccess.getAdditionAccess().getRightMultiplicationParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__RightAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicationAccess().getRightUnaryOperationParserRuleCall_1_1_0()); }
	ruleUnaryOperation{ after(grammarAccess.getMultiplicationAccess().getRightUnaryOperationParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryOperation__OperandAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryOperationAccess().getOperandAtomicParserRuleCall_1_1_0()); }
	ruleAtomic{ after(grammarAccess.getUnaryOperationAccess().getOperandAtomicParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryOperation__OperandAssignment_2_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryOperationAccess().getOperandAtomicParserRuleCall_2_3_0()); }
	ruleAtomic{ after(grammarAccess.getUnaryOperationAccess().getOperandAtomicParserRuleCall_2_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__ValueAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomicAccess().getValueNUMBERTerminalRuleCall_1_1_0()); }
	RULE_NUMBER{ after(grammarAccess.getAtomicAccess().getValueNUMBERTerminalRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__ValueAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomicAccess().getValueBOOLTerminalRuleCall_2_1_0()); }
	RULE_BOOL{ after(grammarAccess.getAtomicAccess().getValueBOOLTerminalRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VariableReference__VariableAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableReferenceAccess().getVariableVariableDeclarationCrossReference_1_0()); }
(
{ before(grammarAccess.getVariableReferenceAccess().getVariableVariableDeclarationIDTerminalRuleCall_1_0_1()); }
	RULE_ID{ after(grammarAccess.getVariableReferenceAccess().getVariableVariableDeclarationIDTerminalRuleCall_1_0_1()); }
)
{ after(grammarAccess.getVariableReferenceAccess().getVariableVariableDeclarationCrossReference_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VariableReference__IndexAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableReferenceAccess().getIndexExpressionParserRuleCall_2_1_0()); }
	ruleExpression{ after(grammarAccess.getVariableReferenceAccess().getIndexExpressionParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_WS : (' '|'\t')+;

RULE_NL : ('\r'|'\n'|RULE_WS)* '\n' RULE_WS*;

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))*;

RULE_NUMBER : '-'? ('0'..'9')+;

RULE_INT : '%%% DONT USE THIS ANYMORE %%%';

RULE_BOOL : ('true'|'false');

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_ANY_OTHER : .;


