module Z3Model.GenerateZ3Model

import org.eclipse.emf.mwe.utils.*
import org.eclipse.xtext.generator.*
import org.eclipse.xtext.ui.generator.*

var grammarURI = "classpath:/edu/kit/iti/formal/pse/worthwhile/z3model/Z3Model.xtext"
var file.extensions = "z3model"
var projectName = "worthwhile.z3model"
var runtimeProject = "../${projectName}"

Workflow {
    bean = StandaloneSetup {
	    scanClassPath = true
		platformUri = "${runtimeProject}/.."
		registerGenModelFile = "platform:/resource/edu.kit.iti.formal.pse.worthwhile.model/model/Worthwhile.genmodel"
	}

	component = DirectoryCleaner {
		directory = "${runtimeProject}/target/generated"
	}

	component = DirectoryCleaner {
		directory = "${runtimeProject}.ui/target/generated"
	}

	component = Generator {
		pathRtProject = runtimeProject
		pathUiProject = "${runtimeProject}.ui"
		projectNameRt = projectName
		projectNameUi = "${projectName}.ui"
		srcPath = "/src"
		srcGenPath = "/target/generated"
		language = {
			uri = grammarURI
			fileExtensions = file.extensions

			// Java API to access grammar elements (required by several other fragments)
			fragment = grammarAccess.GrammarAccessFragment {}

			// the serialization component
			fragment = parseTreeConstructor.ParseTreeConstructorFragment {}

			// a custom ResourceFactory for use with EMF 
			fragment = resourceFactory.ResourceFactoryFragment {
				fileExtensions = file.extensions
			}

			// the Antlr parser
			fragment = parser.antlr.XtextAntlrGeneratorFragment {
				options = {
					classSplitting = true
					backtrack=true
					memoize=true
				}
			}
			
			fragment = parser.antlr.DebugAntlrGeneratorFragment  { }

			// the Ecore2Xtext specific terminal converter
			fragment = ecore2xtext.Ecore2XtextValueConverterServiceFragment {}

			// java-based API for validation 
			fragment = validation.JavaValidatorFragment {
			}

			// scoping and exporting API
			fragment = scoping.ImportURIScopingFragment {}

			fragment = builder.BuilderIntegrationFragment {}
		}
	}
}
