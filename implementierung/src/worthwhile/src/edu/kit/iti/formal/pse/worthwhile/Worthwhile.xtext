grammar edu.kit.iti.formal.pse.worthwhile.Worthwhile with org.eclipse.xtext.common.Terminals 

import "platform:/resource/edu.kit.iti.formal.pse.worthwhile.model/model/Worthwhile.ecore#//kit/iti/formal/pse/worthwhile/model/ast"

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

// A program consists of a sequence of statements and/or function declarations.
Program returns Program  hidden(WS, ML_COMMENT, SL_COMMENT, LINEWRAP) :
	{Program}
	NL* // Newline at the beginning of the file is allowed.
	((axioms+=Axiom | functionDeclarations+=FunctionDeclaration ) NL+)*
	mainBlock=Block
;

// Override the whitespace rules: Disallow line breaks as whitespace since we want to use them to separate statements 
terminal WS : (' '|'\t')+;

// A newline consists of at least one '\n'.
terminal NL : ('\r' | '\n' | WS)* '\n' WS*;

// A line wrap inside a statement
terminal LINEWRAP : '\\' NL;

// A single line comment includes everything from // to the next newline, but not the newline itself.
terminal SL_COMMENT : 
	'//' !('\n'|'\r')*
;

// A number can be any non-negative integer.
terminal NUMBER returns ecore::EBigInteger:
 	('0'..'9')+
;

// We are using the terminal NUMBER instead of INT, so we have to redefine INT because it matches the same pattern as NUMBER.
// Else the parser will throw an error.
terminal INT returns ecore::EInt:
	'%%% DONT USE THIS ANYMORE %%%'
;

// BOOL matches a boolean value. 
terminal BOOL returns ecore::EBoolean:
	'true' | 'false'
;

// The keyword for a ReturnValueReference gets a special terminal rule because we cannot use "_return" directly
// in the ReturnValueReference rule due to https://bugs.eclipse.org/bugs/show_bug.cgi?format=multiple&id=318482
terminal RETURN_VALUE_REFERENCE:
	"_return"
;

terminal RETURN_STATEMENT:
	"return"
;

// An axiom is declared at the top level in the program and is valid for all annotations.
Axiom returns Axiom:
	'_axiom' expression=Expression
;

// A block consists of one or multiple statements.
Block returns Block:
	{Block} (statements+=Statement NL+)*
;

// This is a block enclosed in curly braces
BracedBlock returns Block:
	{Block} '{' NL* (statements+=Statement NL+)* '}'
;

// A statement is everything that can be executed in the program.
Statement returns Statement:
	VariableDeclaration | Assignment | BracedBlock | Annotation | IfStatement | WhileStatement | ReturnStatement
;

// A return statement returns a value from a function.
ReturnStatement returns ReturnStatement:
	function=[FunctionDeclaration|RETURN_STATEMENT] returnValue=Expression
;

// A while statement specifies a while loop.
WhileStatement returns Loop:
	'while' condition=Expression NL* (invariants+=Invariant)* body=BracedBlock
;

// An invariant can be used to specify the invariants of a WHILE loop.
Invariant returns Invariant:
	'_invariant' expression=Expression NL+ 
;

// An if statement specifies a conditional Expression.
IfStatement returns Conditional:
	'if' condition=Expression NL* trueBlock=BracedBlock (NL* 'else' NL* falseBlock=BracedBlock)?
;

// A function declaration declares a function name, parameters, return type, and function body.
FunctionDeclaration returns FunctionDeclaration:
	'function' returnType=Type name=ID '(' (parameters+=Parameter (',' parameters+=Parameter)* )? ')' NL* (preconditions+=Require | postconditions+=Ensure)* body=BracedBlock 
;

// Preconditions are specified using the _requires keyword.
Require returns Precondition:
	'_requires' expression=Expression NL+ 
;

// Preconditions are specified using the _ensures keyword.
Ensure returns Postcondition:
	'_ensures' expression=Expression  NL+ 
;
 
// A function parameter definition describes a single parameter (type and name) accepted by a function or introduced by a quantifier
Parameter returns VariableDeclaration:
	{VariableDeclaration} type=Type name=ID
;

// A type can either be a primitive type or an array of a primitive type
Type returns Type:
	PrimitiveType | ArrayType
;

// A primitive type represents a variable type that can hold one value.
PrimitiveType returns PrimitiveType:
	{IntegerType} 'Integer' | {BooleanType} 'Boolean'	
;

// An array type represents an array of a primitive type.
ArrayType returns ArrayType:
	{ArrayType} baseType=PrimitiveType '[]'
;

// A function call simply calls a function without returning a value.
FunctionCall returns FunctionCall:
	function=[FunctionDeclaration] '(' (actuals+=Expression)? (',' actuals+=Expression)* ')'
;
 
// An annotation is used to specify assertions and assumptions.
Annotation returns Annotation:
	 ({Assertion} '_assert' | {Assumption} '_assume') expression=Expression
;

// A quantified Expression is an Expression optionally preceded by some quantifier definitions.
QuantifiedExpression returns QuantifiedExpression:
	(({ForAllQuantifier} ('forall' | '∀') | {ExistsQuantifier} ('exists' | '∃')) parameter=Parameter (',' condition=Expression)?) (expression=QuantifiedExpression | ':' expression=Expression)
;

// A variable declaration declares a new variable and assigns it a value.
VariableDeclaration returns VariableDeclaration:
	{VariableDeclaration} type=Type name=ID ((':=' | '≔') initialValue=Expression)?
;

// An assignment assigns a value to a variable.
Assignment returns Assignment:
	variable=VariableReference (':=' | '≔') value=Expression
;

// An Expression is based on operator precedence. Each "level" of Expressions means one level of operator precedence,
// where the last operation specified has the highest priority. In the same level, operators are evaluated from left to right.
Expression returns Expression:
	LogicalEquivalence
;

// logical equivalence (lowest priority)
LogicalEquivalence returns Expression:
	LogicalImplication ({Equivalence.left=current} ('⇔' | '<=>') right=LogicalImplication)*
;

// logical implication (second lowest priority)
LogicalImplication returns Expression:
	BooleanOr ({Implication.left=current} ('⇒' | '=>') right=BooleanOr)*
;

// The boolean or has third lowest priority.
BooleanOr returns Expression:
	BooleanAnd ({Disjunction.left=current} ('∨' | '||') right=BooleanAnd)*
;

// The boolean and has fourth lowest priority.
BooleanAnd returns Expression:
	EqualsComparison ({Conjunction.left=current} ('∧' | '&&') right=EqualsComparison)*
;

// The equal and unequal comparisons are next in priority.
EqualsComparison returns Expression:
	Comparison (({Equal.left=current} '=' | {Unequal.left = current} ('!=' | '≠')) right=Comparison)*
;

// A comparison of two integer values is next in priority.
Comparison returns Expression:
	Addition (({Less.left=current} '<' | {LessOrEqual.left=current} ('<=' | '≤') | {GreaterOrEqual.left=current} ('>=' | '≥') | {Greater.left=current} '>') right=Addition)*
;

// Next in priority are addition and subtraction
Addition returns Expression:
	Multiplication (({Addition.left=current} '+' | {Subtraction.left=current} '-') right=Multiplication)*
;

// Next in priority are multiplication, division, and modulo.
Multiplication returns Expression:
	UnaryOperation (({Multiplication.left=current} ('*' | '⋅' | '∙') | {Division.left=current} ('/' | '÷') | {Modulus.left=current} '%') right=UnaryOperation)*
;

// The unary operations (unary plus, unary minus, Boolean not) have second highest priority.
UnaryOperation returns Expression:
	 Atomic | (({Plus} '+' | {Minus} '-' | {Negation} ('¬'|'!') ) operand=Atomic)
;

// An atomic value in an Expression is one of the following:
//  - a function call
//  - a number
//  - a Boolean literal
//  - an Array literal
//  - a reference to a variable or return value
//  - a whole new Expression in parentheses
//  - a quantified expression
Atomic returns Expression:
	FunctionCall | {IntegerLiteral} value=NUMBER | {BooleanLiteral} value=BOOL | ArrayLiteral | VariableReference | ReturnValueReference | '(' Expression ')' | QuantifiedExpression
;

// An array literal is an enumeration of the array's values in curly brackets.
ArrayLiteral returns ArrayLiteral:
	{ArrayLiteral} '{' (values+=Expression (',' values+=Expression)*)? '}'
;

// A variable reference is used to denote the current content of a variable. 
VariableReference returns VariableReference:
	{VariableReference} variable=[VariableDeclaration] ('[' index=Expression ']')?
;

// A special variable reference is needed to point to the return value of a function.
// We also want a cross-reference to the function and abuse the "_return" keyword for that.
ReturnValueReference returns ReturnValueReference:
	{ReturnValueReference} function=[FunctionDeclaration|RETURN_VALUE_REFERENCE] ('[' index=Expression ']')?
;

// Override the ID terminal rule to also allow the $ and @ characters in IDs.
// This has to be (?) at the end of the file, else the parser will parse things strangely, e.g. trying to parse "true" as identifier.   
terminal ID :
	'^'?('a'..'z'|'A'..'Z'|'_'|'$'|'@') ('a'..'z'|'A'..'Z'|'_'|'0'..'9'|'$'|'@')*
;