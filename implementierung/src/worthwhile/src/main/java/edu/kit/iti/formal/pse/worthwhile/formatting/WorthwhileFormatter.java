/*
 * generated by Xtext
 */
package edu.kit.iti.formal.pse.worthwhile.formatting;

import org.eclipse.xtext.formatting.impl.AbstractDeclarativeFormatter;
import edu.kit.iti.formal.pse.worthwhile.services.WorthwhileGrammarAccess;
import org.eclipse.xtext.formatting.impl.FormattingConfig;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.util.Pair;

/**
 * This class contains custom formatting description.
 *
 * see : http://www.eclipse.org/Xtext/documentation/latest/xtext.html#formatting
 * on how and when to use it
 *
 * Also see {@link org.eclipse.xtext.xtext.XtextFormattingTokenSerializer} as an
 * example
 */
public class WorthwhileFormatter extends AbstractDeclarativeFormatter {

    @Override
    protected final void configureFormatting(final FormattingConfig c) {
	WorthwhileGrammarAccess f = (WorthwhileGrammarAccess) getGrammarAccess();
	for (Pair<Keyword, Keyword> pair : f.findKeywordPairs("{", "}")) {
	    c.setIndentation(pair.getFirst(), pair.getSecond());
	    c.setLinewrap(1).after(pair.getFirst());
	    c.setLinewrap(1).before(pair.getSecond());
	    c.setLinewrap(1).after(pair.getSecond());
	}
	for (Keyword comma : f.findKeywords(",")) {
	    c.setNoLinewrap().before(comma);
	    c.setNoSpace().before(comma);
	    c.setLinewrap().after(comma);
	}
	c.setLinewrap(0, 1, 2).before(f.getSL_COMMENTRule());
	c.setLinewrap(0, 1, 2).before(f.getML_COMMENTRule());
	c.setLinewrap(0, 1, 1).after(f.getML_COMMENTRule());
    }
}
