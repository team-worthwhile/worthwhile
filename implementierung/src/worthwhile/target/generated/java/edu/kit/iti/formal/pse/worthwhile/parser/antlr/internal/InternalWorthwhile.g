/*
* generated by Xtext
*/
grammar InternalWorthwhile;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package edu.kit.iti.formal.pse.worthwhile.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package edu.kit.iti.formal.pse.worthwhile.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import edu.kit.iti.formal.pse.worthwhile.services.WorthwhileGrammarAccess;

}

@parser::members {

 	private WorthwhileGrammarAccess grammarAccess;
 	
    public InternalWorthwhileParser(TokenStream input, WorthwhileGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Program";	
   	}
   	
   	@Override
   	protected WorthwhileGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleProgram
entryRuleProgram returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getProgramRule()); }
	 iv_ruleProgram=ruleProgram 
	 { $current=$iv_ruleProgram.current; } 
	 EOF 
;

// Rule Program
ruleProgram returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getProgramAccess().getProgramAction_0(),
            $current);
    }
)(this_NL_1=RULE_NL
    { 
    newLeafNode(this_NL_1, grammarAccess.getProgramAccess().getNLTerminalRuleCall_1()); 
    }
)*(((
(
		{ 
	        newCompositeNode(grammarAccess.getProgramAccess().getAxiomsAxiomParserRuleCall_2_0_0_0()); 
	    }
		lv_axioms_2_0=ruleAxiom		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProgramRule());
	        }
       		add(
       			$current, 
       			"axioms",
        		lv_axioms_2_0, 
        		"Axiom");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getProgramAccess().getFunctionDeclarationsFunctionDeclarationParserRuleCall_2_0_1_0()); 
	    }
		lv_functionDeclarations_3_0=ruleFunctionDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProgramRule());
	        }
       		add(
       			$current, 
       			"functionDeclarations",
        		lv_functionDeclarations_3_0, 
        		"FunctionDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
))(this_NL_4=RULE_NL
    { 
    newLeafNode(this_NL_4, grammarAccess.getProgramAccess().getNLTerminalRuleCall_2_1()); 
    }
)+)*(
(
		{ 
	        newCompositeNode(grammarAccess.getProgramAccess().getMainBlockBlockParserRuleCall_3_0()); 
	    }
		lv_mainBlock_5_0=ruleBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProgramRule());
	        }
       		set(
       			$current, 
       			"mainBlock",
        		lv_mainBlock_5_0, 
        		"Block");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleAxiom
entryRuleAxiom returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAxiomRule()); }
	 iv_ruleAxiom=ruleAxiom 
	 { $current=$iv_ruleAxiom.current; } 
	 EOF 
;

// Rule Axiom
ruleAxiom returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='_axiom' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getAxiomAccess().get_axiomKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAxiomAccess().getExpressionExpressionParserRuleCall_1_0()); 
	    }
		lv_expression_1_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAxiomRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_1_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleBlock
entryRuleBlock returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBlockRule()); }
	 iv_ruleBlock=ruleBlock 
	 { $current=$iv_ruleBlock.current; } 
	 EOF 
;

// Rule Block
ruleBlock returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getBlockAccess().getBlockAction_0(),
            $current);
    }
)((
(
		{ 
	        newCompositeNode(grammarAccess.getBlockAccess().getStatementsStatementParserRuleCall_1_0_0()); 
	    }
		lv_statements_1_0=ruleStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBlockRule());
	        }
       		add(
       			$current, 
       			"statements",
        		lv_statements_1_0, 
        		"Statement");
	        afterParserOrEnumRuleCall();
	    }

)
)(this_NL_2=RULE_NL
    { 
    newLeafNode(this_NL_2, grammarAccess.getBlockAccess().getNLTerminalRuleCall_1_1()); 
    }
)+)*)
;





// Entry rule entryRuleBracedBlock
entryRuleBracedBlock returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBracedBlockRule()); }
	 iv_ruleBracedBlock=ruleBracedBlock 
	 { $current=$iv_ruleBracedBlock.current; } 
	 EOF 
;

// Rule BracedBlock
ruleBracedBlock returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getBracedBlockAccess().getBlockAction_0(),
            $current);
    }
)	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getBracedBlockAccess().getLeftCurlyBracketKeyword_1());
    }
(this_NL_2=RULE_NL
    { 
    newLeafNode(this_NL_2, grammarAccess.getBracedBlockAccess().getNLTerminalRuleCall_2()); 
    }
)*((
(
		{ 
	        newCompositeNode(grammarAccess.getBracedBlockAccess().getStatementsStatementParserRuleCall_3_0_0()); 
	    }
		lv_statements_3_0=ruleStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBracedBlockRule());
	        }
       		add(
       			$current, 
       			"statements",
        		lv_statements_3_0, 
        		"Statement");
	        afterParserOrEnumRuleCall();
	    }

)
)(this_NL_4=RULE_NL
    { 
    newLeafNode(this_NL_4, grammarAccess.getBracedBlockAccess().getNLTerminalRuleCall_3_1()); 
    }
)+)*	otherlv_5='}' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getBracedBlockAccess().getRightCurlyBracketKeyword_4());
    }
)
;





// Entry rule entryRuleStatement
entryRuleStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStatementRule()); }
	 iv_ruleStatement=ruleStatement 
	 { $current=$iv_ruleStatement.current; } 
	 EOF 
;

// Rule Statement
ruleStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getVariableDeclarationParserRuleCall_0()); 
    }
    this_VariableDeclaration_0=ruleVariableDeclaration
    { 
        $current = $this_VariableDeclaration_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getAssignmentParserRuleCall_1()); 
    }
    this_Assignment_1=ruleAssignment
    { 
        $current = $this_Assignment_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getBracedBlockParserRuleCall_2()); 
    }
    this_BracedBlock_2=ruleBracedBlock
    { 
        $current = $this_BracedBlock_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getAnnotationParserRuleCall_3()); 
    }
    this_Annotation_3=ruleAnnotation
    { 
        $current = $this_Annotation_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getIfStatementParserRuleCall_4()); 
    }
    this_IfStatement_4=ruleIfStatement
    { 
        $current = $this_IfStatement_4.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getWhileStatementParserRuleCall_5()); 
    }
    this_WhileStatement_5=ruleWhileStatement
    { 
        $current = $this_WhileStatement_5.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getReturnStatementParserRuleCall_6()); 
    }
    this_ReturnStatement_6=ruleReturnStatement
    { 
        $current = $this_ReturnStatement_6.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleReturnStatement
entryRuleReturnStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getReturnStatementRule()); }
	 iv_ruleReturnStatement=ruleReturnStatement 
	 { $current=$iv_ruleReturnStatement.current; } 
	 EOF 
;

// Rule ReturnStatement
ruleReturnStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='return' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getReturnStatementAccess().getReturnKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getReturnStatementAccess().getReturnValueExpressionParserRuleCall_1_0()); 
	    }
		lv_returnValue_1_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getReturnStatementRule());
	        }
       		set(
       			$current, 
       			"returnValue",
        		lv_returnValue_1_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleWhileStatement
entryRuleWhileStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getWhileStatementRule()); }
	 iv_ruleWhileStatement=ruleWhileStatement 
	 { $current=$iv_ruleWhileStatement.current; } 
	 EOF 
;

// Rule WhileStatement
ruleWhileStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='while' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getWhileStatementAccess().getWhileKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getWhileStatementAccess().getConditionExpressionParserRuleCall_1_0()); 
	    }
		lv_condition_1_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getWhileStatementRule());
	        }
       		set(
       			$current, 
       			"condition",
        		lv_condition_1_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getWhileStatementAccess().getInvariantsInvariantParserRuleCall_2_0()); 
	    }
		lv_invariants_2_0=ruleInvariant		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getWhileStatementRule());
	        }
       		add(
       			$current, 
       			"invariants",
        		lv_invariants_2_0, 
        		"Invariant");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getWhileStatementAccess().getBodyBracedBlockParserRuleCall_3_0()); 
	    }
		lv_body_3_0=ruleBracedBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getWhileStatementRule());
	        }
       		set(
       			$current, 
       			"body",
        		lv_body_3_0, 
        		"BracedBlock");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleInvariant
entryRuleInvariant returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInvariantRule()); }
	 iv_ruleInvariant=ruleInvariant 
	 { $current=$iv_ruleInvariant.current; } 
	 EOF 
;

// Rule Invariant
ruleInvariant returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='_invariant' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getInvariantAccess().get_invariantKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInvariantAccess().getExpressionExpressionParserRuleCall_1_0()); 
	    }
		lv_expression_1_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInvariantRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_1_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(this_NL_2=RULE_NL
    { 
    newLeafNode(this_NL_2, grammarAccess.getInvariantAccess().getNLTerminalRuleCall_2()); 
    }
)+)
;





// Entry rule entryRuleIfStatement
entryRuleIfStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIfStatementRule()); }
	 iv_ruleIfStatement=ruleIfStatement 
	 { $current=$iv_ruleIfStatement.current; } 
	 EOF 
;

// Rule IfStatement
ruleIfStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='if' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getIfStatementAccess().getIfKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIfStatementAccess().getConditionExpressionParserRuleCall_1_0()); 
	    }
		lv_condition_1_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfStatementRule());
	        }
       		set(
       			$current, 
       			"condition",
        		lv_condition_1_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getIfStatementAccess().getTrueBlockBracedBlockParserRuleCall_2_0()); 
	    }
		lv_trueBlock_2_0=ruleBracedBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfStatementRule());
	        }
       		set(
       			$current, 
       			"trueBlock",
        		lv_trueBlock_2_0, 
        		"BracedBlock");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3='else' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getIfStatementAccess().getElseKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIfStatementAccess().getFalseBlockBracedBlockParserRuleCall_3_1_0()); 
	    }
		lv_falseBlock_4_0=ruleBracedBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfStatementRule());
	        }
       		set(
       			$current, 
       			"falseBlock",
        		lv_falseBlock_4_0, 
        		"BracedBlock");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleFunctionDeclaration
entryRuleFunctionDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFunctionDeclarationRule()); }
	 iv_ruleFunctionDeclaration=ruleFunctionDeclaration 
	 { $current=$iv_ruleFunctionDeclaration.current; } 
	 EOF 
;

// Rule FunctionDeclaration
ruleFunctionDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='function' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getFunctionDeclarationAccess().getFunctionKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionDeclarationAccess().getReturnTypeTypeParserRuleCall_1_0()); 
	    }
		lv_returnType_1_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionDeclarationRule());
	        }
       		set(
       			$current, 
       			"returnType",
        		lv_returnType_1_0, 
        		"Type");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_name_2_0=RULE_ID
		{
			newLeafNode(lv_name_2_0, grammarAccess.getFunctionDeclarationAccess().getNameIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFunctionDeclarationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"ID");
	    }

)
)	otherlv_3='(' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getFunctionDeclarationAccess().getLeftParenthesisKeyword_3());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionDeclarationAccess().getParametersParameterParserRuleCall_4_0_0()); 
	    }
		lv_parameters_4_0=ruleParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionDeclarationRule());
	        }
       		add(
       			$current, 
       			"parameters",
        		lv_parameters_4_0, 
        		"Parameter");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_5=',' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getFunctionDeclarationAccess().getCommaKeyword_4_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionDeclarationAccess().getParametersParameterParserRuleCall_4_1_1_0()); 
	    }
		lv_parameters_6_0=ruleParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionDeclarationRule());
	        }
       		add(
       			$current, 
       			"parameters",
        		lv_parameters_6_0, 
        		"Parameter");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_7=')' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getFunctionDeclarationAccess().getRightParenthesisKeyword_5());
    }
(this_NL_8=RULE_NL
    { 
    newLeafNode(this_NL_8, grammarAccess.getFunctionDeclarationAccess().getNLTerminalRuleCall_6()); 
    }
)*((
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionDeclarationAccess().getPreconditionsRequireParserRuleCall_7_0_0()); 
	    }
		lv_preconditions_9_0=ruleRequire		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionDeclarationRule());
	        }
       		add(
       			$current, 
       			"preconditions",
        		lv_preconditions_9_0, 
        		"Require");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionDeclarationAccess().getPostconditionsEnsureParserRuleCall_7_1_0()); 
	    }
		lv_postconditions_10_0=ruleEnsure		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionDeclarationRule());
	        }
       		add(
       			$current, 
       			"postconditions",
        		lv_postconditions_10_0, 
        		"Ensure");
	        afterParserOrEnumRuleCall();
	    }

)
))*(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionDeclarationAccess().getBodyBracedBlockParserRuleCall_8_0()); 
	    }
		lv_body_11_0=ruleBracedBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionDeclarationRule());
	        }
       		set(
       			$current, 
       			"body",
        		lv_body_11_0, 
        		"BracedBlock");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleRequire
entryRuleRequire returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRequireRule()); }
	 iv_ruleRequire=ruleRequire 
	 { $current=$iv_ruleRequire.current; } 
	 EOF 
;

// Rule Require
ruleRequire returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='_requires' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getRequireAccess().get_requiresKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRequireAccess().getExpressionExpressionParserRuleCall_1_0()); 
	    }
		lv_expression_1_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRequireRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_1_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(this_NL_2=RULE_NL
    { 
    newLeafNode(this_NL_2, grammarAccess.getRequireAccess().getNLTerminalRuleCall_2()); 
    }
)+)
;





// Entry rule entryRuleEnsure
entryRuleEnsure returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEnsureRule()); }
	 iv_ruleEnsure=ruleEnsure 
	 { $current=$iv_ruleEnsure.current; } 
	 EOF 
;

// Rule Ensure
ruleEnsure returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='_ensures' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getEnsureAccess().get_ensuresKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getEnsureAccess().getExpressionExpressionParserRuleCall_1_0()); 
	    }
		lv_expression_1_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEnsureRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_1_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(this_NL_2=RULE_NL
    { 
    newLeafNode(this_NL_2, grammarAccess.getEnsureAccess().getNLTerminalRuleCall_2()); 
    }
)+)
;





// Entry rule entryRuleParameter
entryRuleParameter returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getParameterRule()); }
	 iv_ruleParameter=ruleParameter 
	 { $current=$iv_ruleParameter.current; } 
	 EOF 
;

// Rule Parameter
ruleParameter returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getParameterAccess().getVariableDeclarationAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getParameterAccess().getTypeTypeParserRuleCall_1_0()); 
	    }
		lv_type_1_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParameterRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_1_0, 
        		"Type");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_name_2_0=RULE_ID
		{
			newLeafNode(lv_name_2_0, grammarAccess.getParameterAccess().getNameIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getParameterRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"ID");
	    }

)
))
;





// Entry rule entryRuleType
entryRuleType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeRule()); }
	 iv_ruleType=ruleType 
	 { $current=$iv_ruleType.current; } 
	 EOF 
;

// Rule Type
ruleType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getTypeAccess().getPrimitiveTypeParserRuleCall_0()); 
    }
    this_PrimitiveType_0=rulePrimitiveType
    { 
        $current = $this_PrimitiveType_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getTypeAccess().getArrayTypeParserRuleCall_1()); 
    }
    this_ArrayType_1=ruleArrayType
    { 
        $current = $this_ArrayType_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRulePrimitiveType
entryRulePrimitiveType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPrimitiveTypeRule()); }
	 iv_rulePrimitiveType=rulePrimitiveType 
	 { $current=$iv_rulePrimitiveType.current; } 
	 EOF 
;

// Rule PrimitiveType
rulePrimitiveType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
    {
        $current = forceCreateModelElement(
            grammarAccess.getPrimitiveTypeAccess().getIntegerTypeAction_0_0(),
            $current);
    }
)	otherlv_1='Integer' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getPrimitiveTypeAccess().getIntegerKeyword_0_1());
    }
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getPrimitiveTypeAccess().getBooleanTypeAction_1_0(),
            $current);
    }
)	otherlv_3='Boolean' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getPrimitiveTypeAccess().getBooleanKeyword_1_1());
    }
))
;





// Entry rule entryRuleArrayType
entryRuleArrayType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getArrayTypeRule()); }
	 iv_ruleArrayType=ruleArrayType 
	 { $current=$iv_ruleArrayType.current; } 
	 EOF 
;

// Rule ArrayType
ruleArrayType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getArrayTypeAccess().getArrayTypeAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getArrayTypeAccess().getBaseTypePrimitiveTypeParserRuleCall_1_0()); 
	    }
		lv_baseType_1_0=rulePrimitiveType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArrayTypeRule());
	        }
       		set(
       			$current, 
       			"baseType",
        		lv_baseType_1_0, 
        		"PrimitiveType");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='[' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getArrayTypeAccess().getLeftSquareBracketKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getArrayTypeAccess().getSizeExpressionParserRuleCall_3_0()); 
	    }
		lv_size_3_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArrayTypeRule());
	        }
       		set(
       			$current, 
       			"size",
        		lv_size_3_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=']' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getArrayTypeAccess().getRightSquareBracketKeyword_4());
    }
)
;





// Entry rule entryRuleFunctionCall
entryRuleFunctionCall returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFunctionCallRule()); }
	 iv_ruleFunctionCall=ruleFunctionCall 
	 { $current=$iv_ruleFunctionCall.current; } 
	 EOF 
;

// Rule FunctionCall
ruleFunctionCall returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getFunctionCallRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getFunctionCallAccess().getFunctionFunctionDeclarationCrossReference_0_0()); 
	}

)
)	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getFunctionCallAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionCallAccess().getActualsExpressionParserRuleCall_2_0()); 
	    }
		lv_actuals_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionCallRule());
	        }
       		add(
       			$current, 
       			"actuals",
        		lv_actuals_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)?(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getFunctionCallAccess().getCommaKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionCallAccess().getActualsExpressionParserRuleCall_3_1_0()); 
	    }
		lv_actuals_4_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionCallRule());
	        }
       		add(
       			$current, 
       			"actuals",
        		lv_actuals_4_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getFunctionCallAccess().getRightParenthesisKeyword_4());
    }
)
;





// Entry rule entryRuleAnnotation
entryRuleAnnotation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAnnotationRule()); }
	 iv_ruleAnnotation=ruleAnnotation 
	 { $current=$iv_ruleAnnotation.current; } 
	 EOF 
;

// Rule Annotation
ruleAnnotation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((((
    {
        $current = forceCreateModelElement(
            grammarAccess.getAnnotationAccess().getAssertionAction_0_0_0(),
            $current);
    }
)	otherlv_1='_assert' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAnnotationAccess().get_assertKeyword_0_0_1());
    }
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getAnnotationAccess().getAssumptionAction_0_1_0(),
            $current);
    }
)	otherlv_3='_assume' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getAnnotationAccess().get_assumeKeyword_0_1_1());
    }
))(
(
		{ 
	        newCompositeNode(grammarAccess.getAnnotationAccess().getExpressionExpressionParserRuleCall_1_0()); 
	    }
		lv_expression_4_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAnnotationRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_4_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleQuantifiedExpression
entryRuleQuantifiedExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getQuantifiedExpressionRule()); }
	 iv_ruleQuantifiedExpression=ruleQuantifiedExpression 
	 { $current=$iv_ruleQuantifiedExpression.current; } 
	 EOF 
;

// Rule QuantifiedExpression
ruleQuantifiedExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((((
    {
        $current = forceCreateModelElement(
            grammarAccess.getQuantifiedExpressionAccess().getForAllQuantifierAction_0_0_0_0(),
            $current);
    }
)(	otherlv_1='forall' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getQuantifiedExpressionAccess().getForallKeyword_0_0_0_1_0());
    }

    |	otherlv_2='\u2200' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getQuantifiedExpressionAccess().getForAllKeyword_0_0_0_1_1());
    }
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getQuantifiedExpressionAccess().getExistsQuantifierAction_0_0_1_0(),
            $current);
    }
)(	otherlv_4='exists' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getQuantifiedExpressionAccess().getExistsKeyword_0_0_1_1_0());
    }

    |	otherlv_5='\u2203' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getQuantifiedExpressionAccess().getThereExistsKeyword_0_0_1_1_1());
    }
)))(
(
		{ 
	        newCompositeNode(grammarAccess.getQuantifiedExpressionAccess().getParameterParameterParserRuleCall_0_1_0()); 
	    }
		lv_parameter_6_0=ruleParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getQuantifiedExpressionRule());
	        }
       		set(
       			$current, 
       			"parameter",
        		lv_parameter_6_0, 
        		"Parameter");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_7=',' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getQuantifiedExpressionAccess().getCommaKeyword_0_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getQuantifiedExpressionAccess().getConditionExpressionParserRuleCall_0_2_1_0()); 
	    }
		lv_condition_8_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getQuantifiedExpressionRule());
	        }
       		set(
       			$current, 
       			"condition",
        		lv_condition_8_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))?)((
(
		{ 
	        newCompositeNode(grammarAccess.getQuantifiedExpressionAccess().getExpressionQuantifiedExpressionParserRuleCall_1_0_0()); 
	    }
		lv_expression_9_0=ruleQuantifiedExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getQuantifiedExpressionRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_9_0, 
        		"QuantifiedExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(	otherlv_10=':' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getQuantifiedExpressionAccess().getColonKeyword_1_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getQuantifiedExpressionAccess().getExpressionExpressionParserRuleCall_1_1_1_0()); 
	    }
		lv_expression_11_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getQuantifiedExpressionRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_11_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))))
;





// Entry rule entryRuleVariableDeclaration
entryRuleVariableDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVariableDeclarationRule()); }
	 iv_ruleVariableDeclaration=ruleVariableDeclaration 
	 { $current=$iv_ruleVariableDeclaration.current; } 
	 EOF 
;

// Rule VariableDeclaration
ruleVariableDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getVariableDeclarationAccess().getVariableDeclarationAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getVariableDeclarationAccess().getTypeTypeParserRuleCall_1_0()); 
	    }
		lv_type_1_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVariableDeclarationRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_1_0, 
        		"Type");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_name_2_0=RULE_ID
		{
			newLeafNode(lv_name_2_0, grammarAccess.getVariableDeclarationAccess().getNameIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getVariableDeclarationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"ID");
	    }

)
)	otherlv_3=':=' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getVariableDeclarationAccess().getColonEqualsSignKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getVariableDeclarationAccess().getInitialValueExpressionParserRuleCall_4_0()); 
	    }
		lv_initialValue_4_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVariableDeclarationRule());
	        }
       		set(
       			$current, 
       			"initialValue",
        		lv_initialValue_4_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleAssignment
entryRuleAssignment returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAssignmentRule()); }
	 iv_ruleAssignment=ruleAssignment 
	 { $current=$iv_ruleAssignment.current; } 
	 EOF 
;

// Rule Assignment
ruleAssignment returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getAssignmentAccess().getVariableVariableReferenceParserRuleCall_0_0()); 
	    }
		lv_variable_0_0=ruleVariableReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAssignmentRule());
	        }
       		set(
       			$current, 
       			"variable",
        		lv_variable_0_0, 
        		"VariableReference");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1=':=' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAssignmentAccess().getColonEqualsSignKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAssignmentAccess().getValueExpressionParserRuleCall_2_0()); 
	    }
		lv_value_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAssignmentRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	 iv_ruleExpression=ruleExpression 
	 { $current=$iv_ruleExpression.current; } 
	 EOF 
;

// Rule Expression
ruleExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getExpressionAccess().getQuantifiedExpressionParserRuleCall_0()); 
    }
    this_QuantifiedExpression_0=ruleQuantifiedExpression
    { 
        $current = $this_QuantifiedExpression_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getExpressionAccess().getBooleanOrParserRuleCall_1()); 
    }
    this_BooleanOr_1=ruleBooleanOr
    { 
        $current = $this_BooleanOr_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleBooleanOr
entryRuleBooleanOr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBooleanOrRule()); }
	 iv_ruleBooleanOr=ruleBooleanOr 
	 { $current=$iv_ruleBooleanOr.current; } 
	 EOF 
;

// Rule BooleanOr
ruleBooleanOr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getBooleanOrAccess().getBooleanAndParserRuleCall_0()); 
    }
    this_BooleanAnd_0=ruleBooleanAnd
    { 
        $current = $this_BooleanAnd_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getBooleanOrAccess().getDisjunctionLeftAction_1_0(),
            $current);
    }
)(	otherlv_2='\u2228' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getBooleanOrAccess().getLogicalOrKeyword_1_1_0());
    }

    |	otherlv_3='||' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getBooleanOrAccess().getVerticalLineVerticalLineKeyword_1_1_1());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getBooleanOrAccess().getRightBooleanAndParserRuleCall_1_2_0()); 
	    }
		lv_right_4_0=ruleBooleanAnd		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBooleanOrRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_4_0, 
        		"BooleanAnd");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleBooleanAnd
entryRuleBooleanAnd returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBooleanAndRule()); }
	 iv_ruleBooleanAnd=ruleBooleanAnd 
	 { $current=$iv_ruleBooleanAnd.current; } 
	 EOF 
;

// Rule BooleanAnd
ruleBooleanAnd returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getBooleanAndAccess().getEqualsComparisonParserRuleCall_0()); 
    }
    this_EqualsComparison_0=ruleEqualsComparison
    { 
        $current = $this_EqualsComparison_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getBooleanAndAccess().getConjunctionLeftAction_1_0(),
            $current);
    }
)(	otherlv_2='\u2227' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getBooleanAndAccess().getLogicalAndKeyword_1_1_0());
    }

    |	otherlv_3='&&' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getBooleanAndAccess().getAmpersandAmpersandKeyword_1_1_1());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getBooleanAndAccess().getRightEqualsComparisonParserRuleCall_1_2_0()); 
	    }
		lv_right_4_0=ruleEqualsComparison		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBooleanAndRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_4_0, 
        		"EqualsComparison");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleEqualsComparison
entryRuleEqualsComparison returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEqualsComparisonRule()); }
	 iv_ruleEqualsComparison=ruleEqualsComparison 
	 { $current=$iv_ruleEqualsComparison.current; } 
	 EOF 
;

// Rule EqualsComparison
ruleEqualsComparison returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getEqualsComparisonAccess().getComparisonParserRuleCall_0()); 
    }
    this_Comparison_0=ruleComparison
    { 
        $current = $this_Comparison_0.current; 
        afterParserOrEnumRuleCall();
    }
((((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getEqualsComparisonAccess().getEqualLeftAction_1_0_0_0(),
            $current);
    }
)	otherlv_2='=' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getEqualsComparisonAccess().getEqualsSignKeyword_1_0_0_1());
    }
)
    |((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getEqualsComparisonAccess().getUnequalLeftAction_1_0_1_0(),
            $current);
    }
)(	otherlv_4='!=' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getEqualsComparisonAccess().getExclamationMarkEqualsSignKeyword_1_0_1_1_0());
    }

    |	otherlv_5='\u2260' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getEqualsComparisonAccess().getNotEqualToKeyword_1_0_1_1_1());
    }
)))(
(
		{ 
	        newCompositeNode(grammarAccess.getEqualsComparisonAccess().getRightComparisonParserRuleCall_1_1_0()); 
	    }
		lv_right_6_0=ruleComparison		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEqualsComparisonRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_6_0, 
        		"Comparison");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleComparison
entryRuleComparison returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getComparisonRule()); }
	 iv_ruleComparison=ruleComparison 
	 { $current=$iv_ruleComparison.current; } 
	 EOF 
;

// Rule Comparison
ruleComparison returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getComparisonAccess().getAdditionParserRuleCall_0()); 
    }
    this_Addition_0=ruleAddition
    { 
        $current = $this_Addition_0.current; 
        afterParserOrEnumRuleCall();
    }
((((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getComparisonAccess().getLessLeftAction_1_0_0_0(),
            $current);
    }
)	otherlv_2='<' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getComparisonAccess().getLessThanSignKeyword_1_0_0_1());
    }
)
    |((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getComparisonAccess().getLessOrEqualLeftAction_1_0_1_0(),
            $current);
    }
)(	otherlv_4='<=' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getComparisonAccess().getLessThanSignEqualsSignKeyword_1_0_1_1_0());
    }

    |	otherlv_5='\u2264' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getComparisonAccess().getLessThanOrEqualToKeyword_1_0_1_1_1());
    }
))
    |((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getComparisonAccess().getGreaterOrEqualLeftAction_1_0_2_0(),
            $current);
    }
)(	otherlv_7='>=' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getComparisonAccess().getGreaterThanSignEqualsSignKeyword_1_0_2_1_0());
    }

    |	otherlv_8='\u2265' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getComparisonAccess().getGreaterThanOrEqualToKeyword_1_0_2_1_1());
    }
))
    |((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getComparisonAccess().getGreaterLeftAction_1_0_3_0(),
            $current);
    }
)	otherlv_10='>' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getComparisonAccess().getGreaterThanSignKeyword_1_0_3_1());
    }
))(
(
		{ 
	        newCompositeNode(grammarAccess.getComparisonAccess().getRightAdditionParserRuleCall_1_1_0()); 
	    }
		lv_right_11_0=ruleAddition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getComparisonRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_11_0, 
        		"Addition");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleAddition
entryRuleAddition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAdditionRule()); }
	 iv_ruleAddition=ruleAddition 
	 { $current=$iv_ruleAddition.current; } 
	 EOF 
;

// Rule Addition
ruleAddition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getAdditionAccess().getMultiplicationParserRuleCall_0()); 
    }
    this_Multiplication_0=ruleMultiplication
    { 
        $current = $this_Multiplication_0.current; 
        afterParserOrEnumRuleCall();
    }
((((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getAdditionAccess().getAdditionLeftAction_1_0_0_0(),
            $current);
    }
)	otherlv_2='+' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getAdditionAccess().getPlusSignKeyword_1_0_0_1());
    }
)
    |((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getAdditionAccess().getSubtractionLeftAction_1_0_1_0(),
            $current);
    }
)	otherlv_4='-' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getAdditionAccess().getHyphenMinusKeyword_1_0_1_1());
    }
))(
(
		{ 
	        newCompositeNode(grammarAccess.getAdditionAccess().getRightMultiplicationParserRuleCall_1_1_0()); 
	    }
		lv_right_5_0=ruleMultiplication		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAdditionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_5_0, 
        		"Multiplication");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleMultiplication
entryRuleMultiplication returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMultiplicationRule()); }
	 iv_ruleMultiplication=ruleMultiplication 
	 { $current=$iv_ruleMultiplication.current; } 
	 EOF 
;

// Rule Multiplication
ruleMultiplication returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getMultiplicationAccess().getUnaryOperationParserRuleCall_0()); 
    }
    this_UnaryOperation_0=ruleUnaryOperation
    { 
        $current = $this_UnaryOperation_0.current; 
        afterParserOrEnumRuleCall();
    }
((((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getMultiplicationAccess().getMultiplicationLeftAction_1_0_0_0(),
            $current);
    }
)(	otherlv_2='*' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getMultiplicationAccess().getAsteriskKeyword_1_0_0_1_0());
    }

    |	otherlv_3='\u00B7' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getMultiplicationAccess().getMiddleDotKeyword_1_0_0_1_1());
    }
))
    |((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getMultiplicationAccess().getDivisionLeftAction_1_0_1_0(),
            $current);
    }
)(	otherlv_5='/' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getMultiplicationAccess().getSolidusKeyword_1_0_1_1_0());
    }

    |	otherlv_6='\u00F7' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getMultiplicationAccess().getDivisionSignKeyword_1_0_1_1_1());
    }
))
    |((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getMultiplicationAccess().getModulusLeftAction_1_0_2_0(),
            $current);
    }
)	otherlv_8='%' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getMultiplicationAccess().getPercentSignKeyword_1_0_2_1());
    }
))(
(
		{ 
	        newCompositeNode(grammarAccess.getMultiplicationAccess().getRightUnaryOperationParserRuleCall_1_1_0()); 
	    }
		lv_right_9_0=ruleUnaryOperation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMultiplicationRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_9_0, 
        		"UnaryOperation");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleUnaryOperation
entryRuleUnaryOperation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getUnaryOperationRule()); }
	 iv_ruleUnaryOperation=ruleUnaryOperation 
	 { $current=$iv_ruleUnaryOperation.current; } 
	 EOF 
;

// Rule UnaryOperation
ruleUnaryOperation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getUnaryOperationAccess().getAtomicParserRuleCall_0()); 
    }
    this_Atomic_0=ruleAtomic
    { 
        $current = $this_Atomic_0.current; 
        afterParserOrEnumRuleCall();
    }

    |((((
    {
        $current = forceCreateModelElement(
            grammarAccess.getUnaryOperationAccess().getPlusAction_1_0_0_0(),
            $current);
    }
)	otherlv_2='-' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getUnaryOperationAccess().getHyphenMinusKeyword_1_0_0_1());
    }
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getUnaryOperationAccess().getMinusAction_1_0_1_0(),
            $current);
    }
)	otherlv_4='+' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getUnaryOperationAccess().getPlusSignKeyword_1_0_1_1());
    }
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getUnaryOperationAccess().getNegationAction_1_0_2_0(),
            $current);
    }
)(	otherlv_6='\u00AC' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getUnaryOperationAccess().getNotSignKeyword_1_0_2_1_0());
    }

    |	otherlv_7='!' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getUnaryOperationAccess().getExclamationMarkKeyword_1_0_2_1_1());
    }
)))(
(
		{ 
	        newCompositeNode(grammarAccess.getUnaryOperationAccess().getOperandAtomicParserRuleCall_1_1_0()); 
	    }
		lv_operand_8_0=ruleAtomic		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnaryOperationRule());
	        }
       		set(
       			$current, 
       			"operand",
        		lv_operand_8_0, 
        		"Atomic");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getUnaryOperationAccess().getArrayLengthAction_2_0(),
            $current);
    }
)	otherlv_10='length' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getUnaryOperationAccess().getLengthKeyword_2_1());
    }
	otherlv_11='(' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getUnaryOperationAccess().getLeftParenthesisKeyword_2_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getUnaryOperationAccess().getOperandAtomicParserRuleCall_2_3_0()); 
	    }
		lv_operand_12_0=ruleAtomic		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnaryOperationRule());
	        }
       		set(
       			$current, 
       			"operand",
        		lv_operand_12_0, 
        		"Atomic");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_13=')' 
    {
    	newLeafNode(otherlv_13, grammarAccess.getUnaryOperationAccess().getRightParenthesisKeyword_2_4());
    }
))
;





// Entry rule entryRuleAtomic
entryRuleAtomic returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAtomicRule()); }
	 iv_ruleAtomic=ruleAtomic 
	 { $current=$iv_ruleAtomic.current; } 
	 EOF 
;

// Rule Atomic
ruleAtomic returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getAtomicAccess().getFunctionCallParserRuleCall_0()); 
    }
    this_FunctionCall_0=ruleFunctionCall
    { 
        $current = $this_FunctionCall_0.current; 
        afterParserOrEnumRuleCall();
    }

    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getAtomicAccess().getIntegerLiteralAction_1_0(),
            $current);
    }
)(
(
		lv_value_2_0=RULE_NUMBER
		{
			newLeafNode(lv_value_2_0, grammarAccess.getAtomicAccess().getValueNUMBERTerminalRuleCall_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAtomicRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_2_0, 
        		"NUMBER");
	    }

)
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getAtomicAccess().getBooleanLiteralAction_2_0(),
            $current);
    }
)(
(
		lv_value_4_0=RULE_BOOL
		{
			newLeafNode(lv_value_4_0, grammarAccess.getAtomicAccess().getValueBOOLTerminalRuleCall_2_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAtomicRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_4_0, 
        		"BOOL");
	    }

)
))
    |
    { 
        newCompositeNode(grammarAccess.getAtomicAccess().getVariableReferenceParserRuleCall_3()); 
    }
    this_VariableReference_5=ruleVariableReference
    { 
        $current = $this_VariableReference_5.current; 
        afterParserOrEnumRuleCall();
    }

    |(	otherlv_6='(' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getAtomicAccess().getLeftParenthesisKeyword_4_0());
    }

    { 
        newCompositeNode(grammarAccess.getAtomicAccess().getExpressionParserRuleCall_4_1()); 
    }
    this_Expression_7=ruleExpression
    { 
        $current = $this_Expression_7.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_8=')' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getAtomicAccess().getRightParenthesisKeyword_4_2());
    }
))
;





// Entry rule entryRuleVariableReference
entryRuleVariableReference returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVariableReferenceRule()); }
	 iv_ruleVariableReference=ruleVariableReference 
	 { $current=$iv_ruleVariableReference.current; } 
	 EOF 
;

// Rule VariableReference
ruleVariableReference returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getVariableReferenceAccess().getVariableReferenceAction_0(),
            $current);
    }
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getVariableReferenceRule());
	        }
        }
	otherlv_1=RULE_ID
	{
		newLeafNode(otherlv_1, grammarAccess.getVariableReferenceAccess().getVariableVariableDeclarationCrossReference_1_0()); 
	}

)
)(	otherlv_2='[' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getVariableReferenceAccess().getLeftSquareBracketKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getVariableReferenceAccess().getIndexExpressionParserRuleCall_2_1_0()); 
	    }
		lv_index_3_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVariableReferenceRule());
	        }
       		set(
       			$current, 
       			"index",
        		lv_index_3_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=']' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getVariableReferenceAccess().getRightSquareBracketKeyword_2_2());
    }
)?)
;





RULE_WS : (' '|'\t')+;

RULE_NL : ('\r'|'\n'|RULE_WS)* '\n' RULE_WS*;

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))*;

RULE_NUMBER : '-'? ('0'..'9')+;

RULE_INT : '%%% DONT USE THIS ANYMORE %%%';

RULE_BOOL : ('true'|'false');

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_ANY_OTHER : .;


