/*
* generated by Xtext
*/
grammar InternalMyDsl;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package org.xtext.example.mydsl.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.xtext.example.mydsl.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

}

@parser::members {
 
 	private MyDslGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(MyDslGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleModel
entryRuleModel 
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getModelAccess().getAlternatives()); }
(rule__Model__Alternatives)*
{ after(grammarAccess.getModelAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBlock
entryRuleBlock 
:
{ before(grammarAccess.getBlockRule()); }
	 ruleBlock
{ after(grammarAccess.getBlockRule()); } 
	 EOF 
;

// Rule Block
ruleBlock
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBlockAccess().getGroup()); }
(rule__Block__Group__0)
{ after(grammarAccess.getBlockAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleStatement
entryRuleStatement 
:
{ before(grammarAccess.getStatementRule()); }
	 ruleStatement
{ after(grammarAccess.getStatementRule()); } 
	 EOF 
;

// Rule Statement
ruleStatement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStatementAccess().getAlternatives()); }
(rule__Statement__Alternatives)
{ after(grammarAccess.getStatementAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNoOp
entryRuleNoOp 
:
{ before(grammarAccess.getNoOpRule()); }
	 ruleNoOp
{ after(grammarAccess.getNoOpRule()); } 
	 EOF 
;

// Rule NoOp
ruleNoOp
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNoOpAccess().getGroup()); }
(rule__NoOp__Group__0)
{ after(grammarAccess.getNoOpAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleReturnStatement
entryRuleReturnStatement 
:
{ before(grammarAccess.getReturnStatementRule()); }
	 ruleReturnStatement
{ after(grammarAccess.getReturnStatementRule()); } 
	 EOF 
;

// Rule ReturnStatement
ruleReturnStatement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getReturnStatementAccess().getGroup()); }
(rule__ReturnStatement__Group__0)
{ after(grammarAccess.getReturnStatementAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleWhileStatement
entryRuleWhileStatement 
:
{ before(grammarAccess.getWhileStatementRule()); }
	 ruleWhileStatement
{ after(grammarAccess.getWhileStatementRule()); } 
	 EOF 
;

// Rule WhileStatement
ruleWhileStatement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getWhileStatementAccess().getGroup()); }
(rule__WhileStatement__Group__0)
{ after(grammarAccess.getWhileStatementAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleIfStatement
entryRuleIfStatement 
:
{ before(grammarAccess.getIfStatementRule()); }
	 ruleIfStatement
{ after(grammarAccess.getIfStatementRule()); } 
	 EOF 
;

// Rule IfStatement
ruleIfStatement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getIfStatementAccess().getGroup()); }
(rule__IfStatement__Group__0)
{ after(grammarAccess.getIfStatementAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFunctionDeclaration
entryRuleFunctionDeclaration 
:
{ before(grammarAccess.getFunctionDeclarationRule()); }
	 ruleFunctionDeclaration
{ after(grammarAccess.getFunctionDeclarationRule()); } 
	 EOF 
;

// Rule FunctionDeclaration
ruleFunctionDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getGroup()); }
(rule__FunctionDeclaration__Group__0)
{ after(grammarAccess.getFunctionDeclarationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleParameter
entryRuleParameter 
:
{ before(grammarAccess.getParameterRule()); }
	 ruleParameter
{ after(grammarAccess.getParameterRule()); } 
	 EOF 
;

// Rule Parameter
ruleParameter
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getParameterAccess().getGroup()); }
(rule__Parameter__Group__0)
{ after(grammarAccess.getParameterAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleType
entryRuleType 
:
{ before(grammarAccess.getTypeRule()); }
	 ruleType
{ after(grammarAccess.getTypeRule()); } 
	 EOF 
;

// Rule Type
ruleType
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTypeAccess().getAlternatives()); }
(rule__Type__Alternatives)
{ after(grammarAccess.getTypeAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePrimitiveType
entryRulePrimitiveType 
:
{ before(grammarAccess.getPrimitiveTypeRule()); }
	 rulePrimitiveType
{ after(grammarAccess.getPrimitiveTypeRule()); } 
	 EOF 
;

// Rule PrimitiveType
rulePrimitiveType
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPrimitiveTypeAccess().getAlternatives()); }
(rule__PrimitiveType__Alternatives)
{ after(grammarAccess.getPrimitiveTypeAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleIntType
entryRuleIntType 
:
{ before(grammarAccess.getIntTypeRule()); }
	 ruleIntType
{ after(grammarAccess.getIntTypeRule()); } 
	 EOF 
;

// Rule IntType
ruleIntType
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getIntTypeAccess().getGroup()); }
(rule__IntType__Group__0)
{ after(grammarAccess.getIntTypeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBoolType
entryRuleBoolType 
:
{ before(grammarAccess.getBoolTypeRule()); }
	 ruleBoolType
{ after(grammarAccess.getBoolTypeRule()); } 
	 EOF 
;

// Rule BoolType
ruleBoolType
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBoolTypeAccess().getGroup()); }
(rule__BoolType__Group__0)
{ after(grammarAccess.getBoolTypeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleArrayType
entryRuleArrayType 
:
{ before(grammarAccess.getArrayTypeRule()); }
	 ruleArrayType
{ after(grammarAccess.getArrayTypeRule()); } 
	 EOF 
;

// Rule ArrayType
ruleArrayType
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getArrayTypeAccess().getGroup()); }
(rule__ArrayType__Group__0)
{ after(grammarAccess.getArrayTypeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFunctionCall
entryRuleFunctionCall 
:
{ before(grammarAccess.getFunctionCallRule()); }
	 ruleFunctionCall
{ after(grammarAccess.getFunctionCallRule()); } 
	 EOF 
;

// Rule FunctionCall
ruleFunctionCall
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFunctionCallAccess().getGroup()); }
(rule__FunctionCall__Group__0)
{ after(grammarAccess.getFunctionCallAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAnnotation
entryRuleAnnotation 
:
{ before(grammarAccess.getAnnotationRule()); }
	 ruleAnnotation
{ after(grammarAccess.getAnnotationRule()); } 
	 EOF 
;

// Rule Annotation
ruleAnnotation
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAnnotationAccess().getGroup()); }
(rule__Annotation__Group__0)
{ after(grammarAccess.getAnnotationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleVariableDeclaration
entryRuleVariableDeclaration 
:
{ before(grammarAccess.getVariableDeclarationRule()); }
	 ruleVariableDeclaration
{ after(grammarAccess.getVariableDeclarationRule()); } 
	 EOF 
;

// Rule VariableDeclaration
ruleVariableDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getVariableDeclarationAccess().getGroup()); }
(rule__VariableDeclaration__Group__0)
{ after(grammarAccess.getVariableDeclarationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAssignment
entryRuleAssignment 
:
{ before(grammarAccess.getAssignmentRule()); }
	 ruleAssignment
{ after(grammarAccess.getAssignmentRule()); } 
	 EOF 
;

// Rule Assignment
ruleAssignment
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAssignmentAccess().getGroup()); }
(rule__Assignment__Group__0)
{ after(grammarAccess.getAssignmentAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExpr
entryRuleExpr 
:
{ before(grammarAccess.getExprRule()); }
	 ruleExpr
{ after(grammarAccess.getExprRule()); } 
	 EOF 
;

// Rule Expr
ruleExpr
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExprAccess().getComparisonParserRuleCall()); }
	ruleComparison
{ after(grammarAccess.getExprAccess().getComparisonParserRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleComparison
entryRuleComparison 
:
{ before(grammarAccess.getComparisonRule()); }
	 ruleComparison
{ after(grammarAccess.getComparisonRule()); } 
	 EOF 
;

// Rule Comparison
ruleComparison
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getComparisonAccess().getGroup()); }
(rule__Comparison__Group__0)
{ after(grammarAccess.getComparisonAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleComparisonType
entryRuleComparisonType 
:
{ before(grammarAccess.getComparisonTypeRule()); }
	 ruleComparisonType
{ after(grammarAccess.getComparisonTypeRule()); } 
	 EOF 
;

// Rule ComparisonType
ruleComparisonType
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getComparisonTypeAccess().getAlternatives()); }
(rule__ComparisonType__Alternatives)
{ after(grammarAccess.getComparisonTypeAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLessComparisonType
entryRuleLessComparisonType 
:
{ before(grammarAccess.getLessComparisonTypeRule()); }
	 ruleLessComparisonType
{ after(grammarAccess.getLessComparisonTypeRule()); } 
	 EOF 
;

// Rule LessComparisonType
ruleLessComparisonType
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLessComparisonTypeAccess().getGroup()); }
(rule__LessComparisonType__Group__0)
{ after(grammarAccess.getLessComparisonTypeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLessOrEqualComparisonType
entryRuleLessOrEqualComparisonType 
:
{ before(grammarAccess.getLessOrEqualComparisonTypeRule()); }
	 ruleLessOrEqualComparisonType
{ after(grammarAccess.getLessOrEqualComparisonTypeRule()); } 
	 EOF 
;

// Rule LessOrEqualComparisonType
ruleLessOrEqualComparisonType
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLessOrEqualComparisonTypeAccess().getGroup()); }
(rule__LessOrEqualComparisonType__Group__0)
{ after(grammarAccess.getLessOrEqualComparisonTypeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEqualComparisonType
entryRuleEqualComparisonType 
:
{ before(grammarAccess.getEqualComparisonTypeRule()); }
	 ruleEqualComparisonType
{ after(grammarAccess.getEqualComparisonTypeRule()); } 
	 EOF 
;

// Rule EqualComparisonType
ruleEqualComparisonType
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEqualComparisonTypeAccess().getGroup()); }
(rule__EqualComparisonType__Group__0)
{ after(grammarAccess.getEqualComparisonTypeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleGreaterOrEqualComparisonType
entryRuleGreaterOrEqualComparisonType 
:
{ before(grammarAccess.getGreaterOrEqualComparisonTypeRule()); }
	 ruleGreaterOrEqualComparisonType
{ after(grammarAccess.getGreaterOrEqualComparisonTypeRule()); } 
	 EOF 
;

// Rule GreaterOrEqualComparisonType
ruleGreaterOrEqualComparisonType
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getGreaterOrEqualComparisonTypeAccess().getGroup()); }
(rule__GreaterOrEqualComparisonType__Group__0)
{ after(grammarAccess.getGreaterOrEqualComparisonTypeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleGreaterComparisonType
entryRuleGreaterComparisonType 
:
{ before(grammarAccess.getGreaterComparisonTypeRule()); }
	 ruleGreaterComparisonType
{ after(grammarAccess.getGreaterComparisonTypeRule()); } 
	 EOF 
;

// Rule GreaterComparisonType
ruleGreaterComparisonType
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getGreaterComparisonTypeAccess().getGroup()); }
(rule__GreaterComparisonType__Group__0)
{ after(grammarAccess.getGreaterComparisonTypeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAddition
entryRuleAddition 
:
{ before(grammarAccess.getAdditionRule()); }
	 ruleAddition
{ after(grammarAccess.getAdditionRule()); } 
	 EOF 
;

// Rule Addition
ruleAddition
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAdditionAccess().getGroup()); }
(rule__Addition__Group__0)
{ after(grammarAccess.getAdditionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMultiplication
entryRuleMultiplication 
:
{ before(grammarAccess.getMultiplicationRule()); }
	 ruleMultiplication
{ after(grammarAccess.getMultiplicationRule()); } 
	 EOF 
;

// Rule Multiplication
ruleMultiplication
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMultiplicationAccess().getGroup()); }
(rule__Multiplication__Group__0)
{ after(grammarAccess.getMultiplicationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePostfixOperators
entryRulePostfixOperators 
:
{ before(grammarAccess.getPostfixOperatorsRule()); }
	 rulePostfixOperators
{ after(grammarAccess.getPostfixOperatorsRule()); } 
	 EOF 
;

// Rule PostfixOperators
rulePostfixOperators
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPostfixOperatorsAccess().getGroup()); }
(rule__PostfixOperators__Group__0)
{ after(grammarAccess.getPostfixOperatorsAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAtomic
entryRuleAtomic 
:
{ before(grammarAccess.getAtomicRule()); }
	 ruleAtomic
{ after(grammarAccess.getAtomicRule()); } 
	 EOF 
;

// Rule Atomic
ruleAtomic
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAtomicAccess().getAlternatives()); }
(rule__Atomic__Alternatives)
{ after(grammarAccess.getAtomicAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBooleanLiteral
entryRuleBooleanLiteral 
:
{ before(grammarAccess.getBooleanLiteralRule()); }
	 ruleBooleanLiteral
{ after(grammarAccess.getBooleanLiteralRule()); } 
	 EOF 
;

// Rule BooleanLiteral
ruleBooleanLiteral
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBooleanLiteralAccess().getAlternatives()); }
(rule__BooleanLiteral__Alternatives)
{ after(grammarAccess.getBooleanLiteralAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFalseLiteral
entryRuleFalseLiteral 
:
{ before(grammarAccess.getFalseLiteralRule()); }
	 ruleFalseLiteral
{ after(grammarAccess.getFalseLiteralRule()); } 
	 EOF 
;

// Rule FalseLiteral
ruleFalseLiteral
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFalseLiteralAccess().getGroup()); }
(rule__FalseLiteral__Group__0)
{ after(grammarAccess.getFalseLiteralAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTrueLiteral
entryRuleTrueLiteral 
:
{ before(grammarAccess.getTrueLiteralRule()); }
	 ruleTrueLiteral
{ after(grammarAccess.getTrueLiteralRule()); } 
	 EOF 
;

// Rule TrueLiteral
ruleTrueLiteral
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTrueLiteralAccess().getGroup()); }
(rule__TrueLiteral__Group__0)
{ after(grammarAccess.getTrueLiteralAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__Model__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getStatementsAssignment_0()); }
(rule__Model__StatementsAssignment_0)
{ after(grammarAccess.getModelAccess().getStatementsAssignment_0()); }
)

    |(
{ before(grammarAccess.getModelAccess().getFunctionsAssignment_1()); }
(rule__Model__FunctionsAssignment_1)
{ after(grammarAccess.getModelAccess().getFunctionsAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStatementAccess().getGroup_0()); }
(rule__Statement__Group_0__0)
{ after(grammarAccess.getStatementAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getStatementAccess().getNoOpParserRuleCall_1()); }
	ruleNoOp
{ after(grammarAccess.getStatementAccess().getNoOpParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Alternatives_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStatementAccess().getVariableDeclarationParserRuleCall_0_0_0()); }
	ruleVariableDeclaration
{ after(grammarAccess.getStatementAccess().getVariableDeclarationParserRuleCall_0_0_0()); }
)

    |(
{ before(grammarAccess.getStatementAccess().getAssignmentParserRuleCall_0_0_1()); }
	ruleAssignment
{ after(grammarAccess.getStatementAccess().getAssignmentParserRuleCall_0_0_1()); }
)

    |(
{ before(grammarAccess.getStatementAccess().getBlockParserRuleCall_0_0_2()); }
	ruleBlock
{ after(grammarAccess.getStatementAccess().getBlockParserRuleCall_0_0_2()); }
)

    |(
{ before(grammarAccess.getStatementAccess().getAnnotationParserRuleCall_0_0_3()); }
	ruleAnnotation
{ after(grammarAccess.getStatementAccess().getAnnotationParserRuleCall_0_0_3()); }
)

    |(
{ before(grammarAccess.getStatementAccess().getFunctionCallParserRuleCall_0_0_4()); }
	ruleFunctionCall
{ after(grammarAccess.getStatementAccess().getFunctionCallParserRuleCall_0_0_4()); }
)

    |(
{ before(grammarAccess.getStatementAccess().getIfStatementParserRuleCall_0_0_5()); }
	ruleIfStatement
{ after(grammarAccess.getStatementAccess().getIfStatementParserRuleCall_0_0_5()); }
)

    |(
{ before(grammarAccess.getStatementAccess().getWhileStatementParserRuleCall_0_0_6()); }
	ruleWhileStatement
{ after(grammarAccess.getStatementAccess().getWhileStatementParserRuleCall_0_0_6()); }
)

    |(
{ before(grammarAccess.getStatementAccess().getReturnStatementParserRuleCall_0_0_7()); }
	ruleReturnStatement
{ after(grammarAccess.getStatementAccess().getReturnStatementParserRuleCall_0_0_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Type__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeAccess().getPrimitiveTypeParserRuleCall_0()); }
	rulePrimitiveType
{ after(grammarAccess.getTypeAccess().getPrimitiveTypeParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getTypeAccess().getArrayTypeParserRuleCall_1()); }
	ruleArrayType
{ after(grammarAccess.getTypeAccess().getArrayTypeParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PrimitiveType__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimitiveTypeAccess().getIntTypeParserRuleCall_0()); }
	ruleIntType
{ after(grammarAccess.getPrimitiveTypeAccess().getIntTypeParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getPrimitiveTypeAccess().getBoolTypeParserRuleCall_1()); }
	ruleBoolType
{ after(grammarAccess.getPrimitiveTypeAccess().getBoolTypeParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonType__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonTypeAccess().getLessComparisonTypeParserRuleCall_0()); }
	ruleLessComparisonType
{ after(grammarAccess.getComparisonTypeAccess().getLessComparisonTypeParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getComparisonTypeAccess().getLessOrEqualComparisonTypeParserRuleCall_1()); }
	ruleLessOrEqualComparisonType
{ after(grammarAccess.getComparisonTypeAccess().getLessOrEqualComparisonTypeParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getComparisonTypeAccess().getEqualComparisonTypeParserRuleCall_2()); }
	ruleEqualComparisonType
{ after(grammarAccess.getComparisonTypeAccess().getEqualComparisonTypeParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getComparisonTypeAccess().getGreaterOrEqualComparisonTypeParserRuleCall_3()); }
	ruleGreaterOrEqualComparisonType
{ after(grammarAccess.getComparisonTypeAccess().getGreaterOrEqualComparisonTypeParserRuleCall_3()); }
)

    |(
{ before(grammarAccess.getComparisonTypeAccess().getGreaterComparisonTypeParserRuleCall_4()); }
	ruleGreaterComparisonType
{ after(grammarAccess.getComparisonTypeAccess().getGreaterComparisonTypeParserRuleCall_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LessOrEqualComparisonType__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLessOrEqualComparisonTypeAccess().getLessThanSignEqualsSignKeyword_1_0()); }

	'<=' 

{ after(grammarAccess.getLessOrEqualComparisonTypeAccess().getLessThanSignEqualsSignKeyword_1_0()); }
)

    |(
{ before(grammarAccess.getLessOrEqualComparisonTypeAccess().getLessThanOrEqualToKeyword_1_1()); }

	'\u2264' 

{ after(grammarAccess.getLessOrEqualComparisonTypeAccess().getLessThanOrEqualToKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__GreaterOrEqualComparisonType__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGreaterOrEqualComparisonTypeAccess().getGreaterThanSignEqualsSignKeyword_1_0()); }

	'>=' 

{ after(grammarAccess.getGreaterOrEqualComparisonTypeAccess().getGreaterThanSignEqualsSignKeyword_1_0()); }
)

    |(
{ before(grammarAccess.getGreaterOrEqualComparisonTypeAccess().getGreaterThanOrEqualToKeyword_1_1()); }

	'\u2265' 

{ after(grammarAccess.getGreaterOrEqualComparisonTypeAccess().getGreaterThanOrEqualToKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomicAccess().getGroup_0()); }
(rule__Atomic__Group_0__0)
{ after(grammarAccess.getAtomicAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getAtomicAccess().getGroup_1()); }
(rule__Atomic__Group_1__0)
{ after(grammarAccess.getAtomicAccess().getGroup_1()); }
)

    |(
{ before(grammarAccess.getAtomicAccess().getBooleanLiteralParserRuleCall_2()); }
	ruleBooleanLiteral
{ after(grammarAccess.getAtomicAccess().getBooleanLiteralParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanLiteral__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanLiteralAccess().getTrueLiteralParserRuleCall_0()); }
	ruleTrueLiteral
{ after(grammarAccess.getBooleanLiteralAccess().getTrueLiteralParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getBooleanLiteralAccess().getFalseLiteralParserRuleCall_1()); }
	ruleFalseLiteral
{ after(grammarAccess.getBooleanLiteralAccess().getFalseLiteralParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Block__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Block__Group__0__Impl
	rule__Block__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockAccess().getBlockAction_0()); }
(

)
{ after(grammarAccess.getBlockAccess().getBlockAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Block__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Block__Group__1__Impl
	rule__Block__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockAccess().getLeftCurlyBracketKeyword_1()); }

	'{' 

{ after(grammarAccess.getBlockAccess().getLeftCurlyBracketKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Block__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Block__Group__2__Impl
	rule__Block__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockAccess().getLineFeedLfKeyword_2()); }
(
	'\n' 
)?
{ after(grammarAccess.getBlockAccess().getLineFeedLfKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Block__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Block__Group__3__Impl
	rule__Block__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockAccess().getStatementsAssignment_3()); }
(rule__Block__StatementsAssignment_3)*
{ after(grammarAccess.getBlockAccess().getStatementsAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Block__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Block__Group__4__Impl
	rule__Block__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockAccess().getLineFeedLfKeyword_4()); }
(
	'\n' 
)?
{ after(grammarAccess.getBlockAccess().getLineFeedLfKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Block__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Block__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockAccess().getRightCurlyBracketKeyword_5()); }

	'}' 

{ after(grammarAccess.getBlockAccess().getRightCurlyBracketKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__Statement__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Statement__Group_0__0__Impl
	rule__Statement__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStatementAccess().getAlternatives_0_0()); }
(rule__Statement__Alternatives_0_0)
{ after(grammarAccess.getStatementAccess().getAlternatives_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Statement__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Statement__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStatementAccess().getLineFeedLfKeyword_0_1()); }

	'\n' 

{ after(grammarAccess.getStatementAccess().getLineFeedLfKeyword_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__NoOp__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NoOp__Group__0__Impl
	rule__NoOp__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NoOp__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNoOpAccess().getNoOpAction_0()); }
(

)
{ after(grammarAccess.getNoOpAccess().getNoOpAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NoOp__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NoOp__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NoOp__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNoOpAccess().getLineFeedLfKeyword_1()); }

	'\n' 

{ after(grammarAccess.getNoOpAccess().getLineFeedLfKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ReturnStatement__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ReturnStatement__Group__0__Impl
	rule__ReturnStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ReturnStatement__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReturnStatementAccess().getReturnKeyword_0()); }

	'return' 

{ after(grammarAccess.getReturnStatementAccess().getReturnKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ReturnStatement__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ReturnStatement__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ReturnStatement__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReturnStatementAccess().getReturnExprAssignment_1()); }
(rule__ReturnStatement__ReturnExprAssignment_1)
{ after(grammarAccess.getReturnStatementAccess().getReturnExprAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__WhileStatement__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WhileStatement__Group__0__Impl
	rule__WhileStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileStatement__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhileStatementAccess().getWhileStatementAction_0()); }
(

)
{ after(grammarAccess.getWhileStatementAccess().getWhileStatementAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__WhileStatement__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WhileStatement__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileStatement__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhileStatementAccess().getWhileKeyword_1()); }

	'while' 

{ after(grammarAccess.getWhileStatementAccess().getWhileKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__IfStatement__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfStatement__Group__0__Impl
	rule__IfStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfStatementAccess().getIfStatementAction_0()); }
(

)
{ after(grammarAccess.getIfStatementAccess().getIfStatementAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfStatement__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfStatement__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfStatementAccess().getIfKeyword_1()); }

	'if' 

{ after(grammarAccess.getIfStatementAccess().getIfKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__FunctionDeclaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionDeclaration__Group__0__Impl
	rule__FunctionDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getFunctionKeyword_0()); }

	'function' 

{ after(grammarAccess.getFunctionDeclarationAccess().getFunctionKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionDeclaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionDeclaration__Group__1__Impl
	rule__FunctionDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getReturnTypeAssignment_1()); }
(rule__FunctionDeclaration__ReturnTypeAssignment_1)
{ after(grammarAccess.getFunctionDeclarationAccess().getReturnTypeAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionDeclaration__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionDeclaration__Group__2__Impl
	rule__FunctionDeclaration__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getNameAssignment_2()); }
(rule__FunctionDeclaration__NameAssignment_2)
{ after(grammarAccess.getFunctionDeclarationAccess().getNameAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionDeclaration__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionDeclaration__Group__3__Impl
	rule__FunctionDeclaration__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getLeftParenthesisKeyword_3()); }

	'(' 

{ after(grammarAccess.getFunctionDeclarationAccess().getLeftParenthesisKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionDeclaration__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionDeclaration__Group__4__Impl
	rule__FunctionDeclaration__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getGroup_4()); }
(rule__FunctionDeclaration__Group_4__0)?
{ after(grammarAccess.getFunctionDeclarationAccess().getGroup_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionDeclaration__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionDeclaration__Group__5__Impl
	rule__FunctionDeclaration__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getRightParenthesisKeyword_5()); }

	')' 

{ after(grammarAccess.getFunctionDeclarationAccess().getRightParenthesisKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionDeclaration__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionDeclaration__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getBodyAssignment_6()); }
(rule__FunctionDeclaration__BodyAssignment_6)
{ after(grammarAccess.getFunctionDeclarationAccess().getBodyAssignment_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}
















rule__FunctionDeclaration__Group_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionDeclaration__Group_4__0__Impl
	rule__FunctionDeclaration__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__Group_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getParamsAssignment_4_0()); }
(rule__FunctionDeclaration__ParamsAssignment_4_0)
{ after(grammarAccess.getFunctionDeclarationAccess().getParamsAssignment_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionDeclaration__Group_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionDeclaration__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__Group_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getGroup_4_1()); }
(rule__FunctionDeclaration__Group_4_1__0)*
{ after(grammarAccess.getFunctionDeclarationAccess().getGroup_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__FunctionDeclaration__Group_4_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionDeclaration__Group_4_1__0__Impl
	rule__FunctionDeclaration__Group_4_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__Group_4_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getCommaKeyword_4_1_0()); }

	',' 

{ after(grammarAccess.getFunctionDeclarationAccess().getCommaKeyword_4_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionDeclaration__Group_4_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionDeclaration__Group_4_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__Group_4_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getParamsAssignment_4_1_1()); }
(rule__FunctionDeclaration__ParamsAssignment_4_1_1)
{ after(grammarAccess.getFunctionDeclarationAccess().getParamsAssignment_4_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Parameter__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Parameter__Group__0__Impl
	rule__Parameter__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterAccess().getParameterAction_0()); }
(

)
{ after(grammarAccess.getParameterAccess().getParameterAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Parameter__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Parameter__Group__1__Impl
	rule__Parameter__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterAccess().getTypeAssignment_1()); }
(rule__Parameter__TypeAssignment_1)
{ after(grammarAccess.getParameterAccess().getTypeAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Parameter__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Parameter__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterAccess().getNameAssignment_2()); }
(rule__Parameter__NameAssignment_2)
{ after(grammarAccess.getParameterAccess().getNameAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__IntType__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IntType__Group__0__Impl
	rule__IntType__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IntType__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntTypeAccess().getIntTypeAction_0()); }
(

)
{ after(grammarAccess.getIntTypeAccess().getIntTypeAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IntType__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IntType__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IntType__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntTypeAccess().getIntKeyword_1()); }

	'int' 

{ after(grammarAccess.getIntTypeAccess().getIntKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__BoolType__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BoolType__Group__0__Impl
	rule__BoolType__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolType__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBoolTypeAccess().getBoolTypeAction_0()); }
(

)
{ after(grammarAccess.getBoolTypeAccess().getBoolTypeAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BoolType__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BoolType__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolType__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBoolTypeAccess().getBoolKeyword_1()); }

	'bool' 

{ after(grammarAccess.getBoolTypeAccess().getBoolKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ArrayType__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArrayType__Group__0__Impl
	rule__ArrayType__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayType__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayTypeAccess().getArrayTypeAction_0()); }
(

)
{ after(grammarAccess.getArrayTypeAccess().getArrayTypeAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ArrayType__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArrayType__Group__1__Impl
	rule__ArrayType__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayType__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayTypeAccess().getBaseTypeAssignment_1()); }
(rule__ArrayType__BaseTypeAssignment_1)
{ after(grammarAccess.getArrayTypeAccess().getBaseTypeAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ArrayType__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArrayType__Group__2__Impl
	rule__ArrayType__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayType__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayTypeAccess().getLeftSquareBracketKeyword_2()); }

	'[' 

{ after(grammarAccess.getArrayTypeAccess().getLeftSquareBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ArrayType__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArrayType__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayType__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayTypeAccess().getRightSquareBracketKeyword_3()); }

	']' 

{ after(grammarAccess.getArrayTypeAccess().getRightSquareBracketKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__FunctionCall__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionCall__Group__0__Impl
	rule__FunctionCall__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionCallAccess().getFunctionCallAction_0()); }
(

)
{ after(grammarAccess.getFunctionCallAccess().getFunctionCallAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionCall__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionCall__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionCallAccess().getFunctionCallStatementKeyword_1()); }

	'functionCallStatement' 

{ after(grammarAccess.getFunctionCallAccess().getFunctionCallStatementKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Annotation__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Annotation__Group__0__Impl
	rule__Annotation__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Annotation__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnnotationAccess().getAnnotationAction_0()); }
(

)
{ after(grammarAccess.getAnnotationAccess().getAnnotationAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Annotation__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Annotation__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Annotation__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnnotationAccess().getTODO5Keyword_1()); }

	'TODO5' 

{ after(grammarAccess.getAnnotationAccess().getTODO5Keyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__VariableDeclaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableDeclaration__Group__0__Impl
	rule__VariableDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclarationAccess().getTypeAssignment_0()); }
(rule__VariableDeclaration__TypeAssignment_0)
{ after(grammarAccess.getVariableDeclarationAccess().getTypeAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VariableDeclaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableDeclaration__Group__1__Impl
	rule__VariableDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclarationAccess().getNameAssignment_1()); }
(rule__VariableDeclaration__NameAssignment_1)
{ after(grammarAccess.getVariableDeclarationAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VariableDeclaration__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableDeclaration__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclarationAccess().getGroup_2()); }
(rule__VariableDeclaration__Group_2__0)
{ after(grammarAccess.getVariableDeclarationAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__VariableDeclaration__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableDeclaration__Group_2__0__Impl
	rule__VariableDeclaration__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclarationAccess().getColonEqualsSignKeyword_2_0()); }

	':=' 

{ after(grammarAccess.getVariableDeclarationAccess().getColonEqualsSignKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VariableDeclaration__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableDeclaration__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclarationAccess().getInitialValueAssignment_2_1()); }
(rule__VariableDeclaration__InitialValueAssignment_2_1)
{ after(grammarAccess.getVariableDeclarationAccess().getInitialValueAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Assignment__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Assignment__Group__0__Impl
	rule__Assignment__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentAccess().getVariableAssignment_0()); }
(rule__Assignment__VariableAssignment_0)
{ after(grammarAccess.getAssignmentAccess().getVariableAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Assignment__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Assignment__Group__1__Impl
	rule__Assignment__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentAccess().getColonEqualsSignKeyword_1()); }

	':=' 

{ after(grammarAccess.getAssignmentAccess().getColonEqualsSignKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Assignment__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Assignment__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentAccess().getValueAssignment_2()); }
(rule__Assignment__ValueAssignment_2)
{ after(grammarAccess.getAssignmentAccess().getValueAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Comparison__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Comparison__Group__0__Impl
	rule__Comparison__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonAccess().getAdditionParserRuleCall_0()); }
	ruleAddition
{ after(grammarAccess.getComparisonAccess().getAdditionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Comparison__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Comparison__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonAccess().getGroup_1()); }
(rule__Comparison__Group_1__0)?
{ after(grammarAccess.getComparisonAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Comparison__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Comparison__Group_1__0__Impl
	rule__Comparison__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonAccess().getEqualsLeftAction_1_0()); }
(

)
{ after(grammarAccess.getComparisonAccess().getEqualsLeftAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Comparison__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Comparison__Group_1__1__Impl
	rule__Comparison__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonAccess().getTypeAssignment_1_1()); }
(rule__Comparison__TypeAssignment_1_1)
{ after(grammarAccess.getComparisonAccess().getTypeAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Comparison__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Comparison__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonAccess().getRightAssignment_1_2()); }
(rule__Comparison__RightAssignment_1_2)
{ after(grammarAccess.getComparisonAccess().getRightAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__LessComparisonType__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LessComparisonType__Group__0__Impl
	rule__LessComparisonType__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LessComparisonType__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLessComparisonTypeAccess().getLessComparisonTypeAction_0()); }
(

)
{ after(grammarAccess.getLessComparisonTypeAccess().getLessComparisonTypeAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LessComparisonType__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LessComparisonType__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LessComparisonType__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLessComparisonTypeAccess().getLessThanSignKeyword_1()); }

	'<' 

{ after(grammarAccess.getLessComparisonTypeAccess().getLessThanSignKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__LessOrEqualComparisonType__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LessOrEqualComparisonType__Group__0__Impl
	rule__LessOrEqualComparisonType__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LessOrEqualComparisonType__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLessOrEqualComparisonTypeAccess().getLessOrEqualComparisonTypeAction_0()); }
(

)
{ after(grammarAccess.getLessOrEqualComparisonTypeAccess().getLessOrEqualComparisonTypeAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LessOrEqualComparisonType__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LessOrEqualComparisonType__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LessOrEqualComparisonType__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLessOrEqualComparisonTypeAccess().getAlternatives_1()); }
(rule__LessOrEqualComparisonType__Alternatives_1)
{ after(grammarAccess.getLessOrEqualComparisonTypeAccess().getAlternatives_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__EqualComparisonType__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EqualComparisonType__Group__0__Impl
	rule__EqualComparisonType__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualComparisonType__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualComparisonTypeAccess().getEqualComparisonTypeAction_0()); }
(

)
{ after(grammarAccess.getEqualComparisonTypeAccess().getEqualComparisonTypeAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EqualComparisonType__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EqualComparisonType__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualComparisonType__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualComparisonTypeAccess().getEqualsSignKeyword_1()); }

	'=' 

{ after(grammarAccess.getEqualComparisonTypeAccess().getEqualsSignKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__GreaterOrEqualComparisonType__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GreaterOrEqualComparisonType__Group__0__Impl
	rule__GreaterOrEqualComparisonType__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__GreaterOrEqualComparisonType__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGreaterOrEqualComparisonTypeAccess().getGreaterOrEqualComparisonTypeAction_0()); }
(

)
{ after(grammarAccess.getGreaterOrEqualComparisonTypeAccess().getGreaterOrEqualComparisonTypeAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__GreaterOrEqualComparisonType__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GreaterOrEqualComparisonType__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__GreaterOrEqualComparisonType__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGreaterOrEqualComparisonTypeAccess().getAlternatives_1()); }
(rule__GreaterOrEqualComparisonType__Alternatives_1)
{ after(grammarAccess.getGreaterOrEqualComparisonTypeAccess().getAlternatives_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__GreaterComparisonType__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GreaterComparisonType__Group__0__Impl
	rule__GreaterComparisonType__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__GreaterComparisonType__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGreaterComparisonTypeAccess().getGreaterComparisonTypeAction_0()); }
(

)
{ after(grammarAccess.getGreaterComparisonTypeAccess().getGreaterComparisonTypeAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__GreaterComparisonType__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GreaterComparisonType__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__GreaterComparisonType__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGreaterComparisonTypeAccess().getGreaterThanSignKeyword_1()); }

	'>' 

{ after(grammarAccess.getGreaterComparisonTypeAccess().getGreaterThanSignKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Addition__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Addition__Group__0__Impl
	rule__Addition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditionAccess().getMultiplicationParserRuleCall_0()); }
	ruleMultiplication
{ after(grammarAccess.getAdditionAccess().getMultiplicationParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Addition__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Addition__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditionAccess().getGroup_1()); }
(rule__Addition__Group_1__0)*
{ after(grammarAccess.getAdditionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Addition__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Addition__Group_1__0__Impl
	rule__Addition__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditionAccess().getPlusLeftAction_1_0()); }
(

)
{ after(grammarAccess.getAdditionAccess().getPlusLeftAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Addition__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Addition__Group_1__1__Impl
	rule__Addition__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditionAccess().getPlusSignKeyword_1_1()); }

	'+' 

{ after(grammarAccess.getAdditionAccess().getPlusSignKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Addition__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Addition__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditionAccess().getRightAssignment_1_2()); }
(rule__Addition__RightAssignment_1_2)
{ after(grammarAccess.getAdditionAccess().getRightAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Multiplication__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Multiplication__Group__0__Impl
	rule__Multiplication__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicationAccess().getPostfixOperatorsParserRuleCall_0()); }
	rulePostfixOperators
{ after(grammarAccess.getMultiplicationAccess().getPostfixOperatorsParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Multiplication__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Multiplication__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicationAccess().getGroup_1()); }
(rule__Multiplication__Group_1__0)*
{ after(grammarAccess.getMultiplicationAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Multiplication__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Multiplication__Group_1__0__Impl
	rule__Multiplication__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicationAccess().getMultiLeftAction_1_0()); }
(

)
{ after(grammarAccess.getMultiplicationAccess().getMultiLeftAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Multiplication__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Multiplication__Group_1__1__Impl
	rule__Multiplication__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicationAccess().getAsteriskKeyword_1_1()); }

	'*' 

{ after(grammarAccess.getMultiplicationAccess().getAsteriskKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Multiplication__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Multiplication__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicationAccess().getRightAssignment_1_2()); }
(rule__Multiplication__RightAssignment_1_2)
{ after(grammarAccess.getMultiplicationAccess().getRightAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__PostfixOperators__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PostfixOperators__Group__0__Impl
	rule__PostfixOperators__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PostfixOperators__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPostfixOperatorsAccess().getAtomicParserRuleCall_0()); }
	ruleAtomic
{ after(grammarAccess.getPostfixOperatorsAccess().getAtomicParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PostfixOperators__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PostfixOperators__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PostfixOperators__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPostfixOperatorsAccess().getGroup_1()); }
(rule__PostfixOperators__Group_1__0)?
{ after(grammarAccess.getPostfixOperatorsAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__PostfixOperators__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PostfixOperators__Group_1__0__Impl
	rule__PostfixOperators__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PostfixOperators__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPostfixOperatorsAccess().getArrayAccessExprAction_1_0()); }
(

)
{ after(grammarAccess.getPostfixOperatorsAccess().getArrayAccessExprAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PostfixOperators__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PostfixOperators__Group_1__1__Impl
	rule__PostfixOperators__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PostfixOperators__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPostfixOperatorsAccess().getLeftSquareBracketKeyword_1_1()); }

	'[' 

{ after(grammarAccess.getPostfixOperatorsAccess().getLeftSquareBracketKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PostfixOperators__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PostfixOperators__Group_1__2__Impl
	rule__PostfixOperators__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__PostfixOperators__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPostfixOperatorsAccess().getIndexAssignment_1_2()); }
(rule__PostfixOperators__IndexAssignment_1_2)
{ after(grammarAccess.getPostfixOperatorsAccess().getIndexAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PostfixOperators__Group_1__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PostfixOperators__Group_1__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PostfixOperators__Group_1__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPostfixOperatorsAccess().getRightSquareBracketKeyword_1_3()); }

	']' 

{ after(grammarAccess.getPostfixOperatorsAccess().getRightSquareBracketKeyword_1_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Atomic__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Atomic__Group_0__0__Impl
	rule__Atomic__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomicAccess().getSymbolRefAction_0_0()); }
(

)
{ after(grammarAccess.getAtomicAccess().getSymbolRefAction_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Atomic__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Atomic__Group_0__1__Impl
	rule__Atomic__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomicAccess().getSymbolAssignment_0_1()); }
(rule__Atomic__SymbolAssignment_0_1)
{ after(grammarAccess.getAtomicAccess().getSymbolAssignment_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Atomic__Group_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Atomic__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__Group_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomicAccess().getGroup_0_2()); }
(rule__Atomic__Group_0_2__0)?
{ after(grammarAccess.getAtomicAccess().getGroup_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Atomic__Group_0_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Atomic__Group_0_2__0__Impl
	rule__Atomic__Group_0_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__Group_0_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomicAccess().getLeftParenthesisKeyword_0_2_0()); }

	'(' 

{ after(grammarAccess.getAtomicAccess().getLeftParenthesisKeyword_0_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Atomic__Group_0_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Atomic__Group_0_2__1__Impl
	rule__Atomic__Group_0_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__Group_0_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomicAccess().getActualsAssignment_0_2_1()); }
(rule__Atomic__ActualsAssignment_0_2_1)?
{ after(grammarAccess.getAtomicAccess().getActualsAssignment_0_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Atomic__Group_0_2__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Atomic__Group_0_2__2__Impl
	rule__Atomic__Group_0_2__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__Group_0_2__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomicAccess().getGroup_0_2_2()); }
(rule__Atomic__Group_0_2_2__0)*
{ after(grammarAccess.getAtomicAccess().getGroup_0_2_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Atomic__Group_0_2__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Atomic__Group_0_2__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__Group_0_2__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomicAccess().getRightParenthesisKeyword_0_2_3()); }

	')' 

{ after(grammarAccess.getAtomicAccess().getRightParenthesisKeyword_0_2_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Atomic__Group_0_2_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Atomic__Group_0_2_2__0__Impl
	rule__Atomic__Group_0_2_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__Group_0_2_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomicAccess().getCommaKeyword_0_2_2_0()); }

	',' 

{ after(grammarAccess.getAtomicAccess().getCommaKeyword_0_2_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Atomic__Group_0_2_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Atomic__Group_0_2_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__Group_0_2_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomicAccess().getActualsAssignment_0_2_2_1()); }
(rule__Atomic__ActualsAssignment_0_2_2_1)
{ after(grammarAccess.getAtomicAccess().getActualsAssignment_0_2_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Atomic__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Atomic__Group_1__0__Impl
	rule__Atomic__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomicAccess().getNumberLiteralAction_1_0()); }
(

)
{ after(grammarAccess.getAtomicAccess().getNumberLiteralAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Atomic__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Atomic__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomicAccess().getValueAssignment_1_1()); }
(rule__Atomic__ValueAssignment_1_1)
{ after(grammarAccess.getAtomicAccess().getValueAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__FalseLiteral__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FalseLiteral__Group__0__Impl
	rule__FalseLiteral__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FalseLiteral__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFalseLiteralAccess().getFalseLiteralAction_0()); }
(

)
{ after(grammarAccess.getFalseLiteralAccess().getFalseLiteralAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FalseLiteral__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FalseLiteral__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FalseLiteral__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFalseLiteralAccess().getFalseKeyword_1()); }

	'false' 

{ after(grammarAccess.getFalseLiteralAccess().getFalseKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__TrueLiteral__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TrueLiteral__Group__0__Impl
	rule__TrueLiteral__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TrueLiteral__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTrueLiteralAccess().getTrueLiteralAction_0()); }
(

)
{ after(grammarAccess.getTrueLiteralAccess().getTrueLiteralAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TrueLiteral__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TrueLiteral__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TrueLiteral__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTrueLiteralAccess().getTrueKeyword_1()); }

	'true' 

{ after(grammarAccess.getTrueLiteralAccess().getTrueKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__Model__StatementsAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getStatementsStatementParserRuleCall_0_0()); }
	ruleStatement{ after(grammarAccess.getModelAccess().getStatementsStatementParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Model__FunctionsAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getFunctionsFunctionDeclarationParserRuleCall_1_0()); }
	ruleFunctionDeclaration{ after(grammarAccess.getModelAccess().getFunctionsFunctionDeclarationParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Block__StatementsAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockAccess().getStatementsStatementParserRuleCall_3_0()); }
	ruleStatement{ after(grammarAccess.getBlockAccess().getStatementsStatementParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ReturnStatement__ReturnExprAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReturnStatementAccess().getReturnExprExprParserRuleCall_1_0()); }
	ruleExpr{ after(grammarAccess.getReturnStatementAccess().getReturnExprExprParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__ReturnTypeAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getReturnTypeTypeParserRuleCall_1_0()); }
	ruleType{ after(grammarAccess.getFunctionDeclarationAccess().getReturnTypeTypeParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__NameAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getNameIDTerminalRuleCall_2_0()); }
	RULE_ID{ after(grammarAccess.getFunctionDeclarationAccess().getNameIDTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__ParamsAssignment_4_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getParamsParameterParserRuleCall_4_0_0()); }
	ruleParameter{ after(grammarAccess.getFunctionDeclarationAccess().getParamsParameterParserRuleCall_4_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__ParamsAssignment_4_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getParamsParameterParserRuleCall_4_1_1_0()); }
	ruleParameter{ after(grammarAccess.getFunctionDeclarationAccess().getParamsParameterParserRuleCall_4_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__BodyAssignment_6
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getBodyBlockParserRuleCall_6_0()); }
	ruleBlock{ after(grammarAccess.getFunctionDeclarationAccess().getBodyBlockParserRuleCall_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__TypeAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterAccess().getTypeTypeParserRuleCall_1_0()); }
	ruleType{ after(grammarAccess.getParameterAccess().getTypeTypeParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__NameAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterAccess().getNameIDTerminalRuleCall_2_0()); }
	RULE_ID{ after(grammarAccess.getParameterAccess().getNameIDTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayType__BaseTypeAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayTypeAccess().getBaseTypePrimitiveTypeParserRuleCall_1_0()); }
	rulePrimitiveType{ after(grammarAccess.getArrayTypeAccess().getBaseTypePrimitiveTypeParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__TypeAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclarationAccess().getTypeTypeParserRuleCall_0_0()); }
	ruleType{ after(grammarAccess.getVariableDeclarationAccess().getTypeTypeParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclarationAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getVariableDeclarationAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__InitialValueAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclarationAccess().getInitialValueExprParserRuleCall_2_1_0()); }
	ruleExpr{ after(grammarAccess.getVariableDeclarationAccess().getInitialValueExprParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__VariableAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentAccess().getVariableIDTerminalRuleCall_0_0()); }
	RULE_ID{ after(grammarAccess.getAssignmentAccess().getVariableIDTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__ValueAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentAccess().getValueExprParserRuleCall_2_0()); }
	ruleExpr{ after(grammarAccess.getAssignmentAccess().getValueExprParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__TypeAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonAccess().getTypeComparisonTypeParserRuleCall_1_1_0()); }
	ruleComparisonType{ after(grammarAccess.getComparisonAccess().getTypeComparisonTypeParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__RightAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonAccess().getRightAdditionParserRuleCall_1_2_0()); }
	ruleAddition{ after(grammarAccess.getComparisonAccess().getRightAdditionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__RightAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditionAccess().getRightMultiplicationParserRuleCall_1_2_0()); }
	ruleMultiplication{ after(grammarAccess.getAdditionAccess().getRightMultiplicationParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__RightAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicationAccess().getRightPostfixOperatorsParserRuleCall_1_2_0()); }
	rulePostfixOperators{ after(grammarAccess.getMultiplicationAccess().getRightPostfixOperatorsParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PostfixOperators__IndexAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPostfixOperatorsAccess().getIndexExprParserRuleCall_1_2_0()); }
	ruleExpr{ after(grammarAccess.getPostfixOperatorsAccess().getIndexExprParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__SymbolAssignment_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomicAccess().getSymbolSymbolCrossReference_0_1_0()); }
(
{ before(grammarAccess.getAtomicAccess().getSymbolSymbolIDTerminalRuleCall_0_1_0_1()); }
	RULE_ID{ after(grammarAccess.getAtomicAccess().getSymbolSymbolIDTerminalRuleCall_0_1_0_1()); }
)
{ after(grammarAccess.getAtomicAccess().getSymbolSymbolCrossReference_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__ActualsAssignment_0_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomicAccess().getActualsExprParserRuleCall_0_2_1_0()); }
	ruleExpr{ after(grammarAccess.getAtomicAccess().getActualsExprParserRuleCall_0_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__ActualsAssignment_0_2_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomicAccess().getActualsExprParserRuleCall_0_2_2_1_0()); }
	ruleExpr{ after(grammarAccess.getAtomicAccess().getActualsExprParserRuleCall_0_2_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__ValueAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomicAccess().getValueINTTerminalRuleCall_1_1_0()); }
	RULE_INT{ after(grammarAccess.getAtomicAccess().getValueINTTerminalRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_WS : (' '|'\t'|'\r')+;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_ANY_OTHER : .;


