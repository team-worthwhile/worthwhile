grammar org.xtext.example.mydsl.MyDsl with org.eclipse.xtext.common.Terminals

generate myDsl "http://www.xtext.org/example/mydsl/MyDsl"

// A program consists of a sequence of statements and/or function declarations.
Model:
	(statements+=Statement | functions+=FunctionDeclaration)? // The first statement does not need a newline before …
	(NL (statements+=Statement | functions+=FunctionDeclaration))* // … but all the other statements do.
	// FIXME: newline at end of file not possible ATM
;

// Override the whitespace rules: Disallow line breaks as whitespace since we want to use them to separate statements 
terminal WS : (' '|'\t')+;

// A newline preceding a statement consists of at least a newline character, optionally followed by some whitespace and moar newlines.
// The latter is necessary because of "blank lines" that have some whitespace (e.g. indentation) in them.
// TODO: \r
terminal NL : '\n' ('\n' | WS)*;

// A block consists of one or multiple statements enclosed in curly brackets.
Block:
	{Block} '{' (statements+=Statement)? (NL statements+=Statement)* NL? '}'
;

// A statement is everything that can be executed in the program.
Statement:
	(VariableDeclaration | Assignment | Block | Annotation | FunctionCall | IfStatement | WhileStatement | ReturnStatement )
;

// A return statement returns a value from a function.
ReturnStatement:
	'return' returnExpr=Expr
;

// A while statement specifies a while loop.
WhileStatement:
	'while' condition=Expr body=Block
;

// An if statement specifies a conditional expression.
IfStatement:
	'if' condition=Expr then=Block ('else' else=Block)?
;

// A function declaration declares a function name, parameters, return type, and function body.
FunctionDeclaration:
	'function' returnType=Type name=ID '(' (params+=Parameter (',' params+=Parameter)* )? ')' body=Block
;

// A parameter definition describes a single parameter (type and name) accepted by a function.
Parameter returns Symbol:
	{Parameter} type=Type name=ID
;

// A type can either be a primitive type or an array of a primitive type
Type:
	PrimitiveType | ArrayType
;

// A primitive type represents a variable type that can hold one value.
PrimitiveType:
	IntType | BoolType	
;

// An integer type represents an arbitrarily large integer.
IntType:
	{IntType} 'int'
;

// A bool type represents a Boolean value.
BoolType:
	{BoolType} 'bool'
;

// An array type represents an array of a primitive type.
ArrayType:
	{ArrayType} baseType=PrimitiveType '[' ']'
;

// A function call simply calls a function without returning a value. 
FunctionCall:
	{SymbolRef} symbol=[Symbol|ID] ("(" (actuals+=Expr)? ("," actuals+=Expr)* ")")?
;

// An annotation is used to specify assertions and assumptions.
Annotation:
	 {Annotation} 'TODO5'
;

// A variable declaration declares a new variable and optionally assigns it a value.
VariableDeclaration:
	type=Type name=ID ( ':=' initialValue=Expr)
;

// An assignment assigns a value to a variable.
Assignment:
	variable=ID ':=' value=Expr
;

Expr:
	EqualsComparison;

EqualsComparison returns Expression:
	Comparison ({Equals.left=current} '=' right=Comparison)?;
	
Comparison returns Expression:
	Addition ({Compare.left=current} type=ComparisonType right=Addition)?;

ComparisonType:
	LessComparisonType | LessOrEqualComparisonType | GreaterOrEqualComparisonType | GreaterComparisonType
;

LessComparisonType:
	{LessComparisonType} '<'
;

LessOrEqualComparisonType:
	{LessOrEqualComparisonType} ('<=' | '≤')	
;

GreaterOrEqualComparisonType:
	{GreaterOrEqualComparisonType} ('>=' | '≥')
;

GreaterComparisonType:
	 {GreaterComparisonType} '>'	
;

Addition returns Expression:
	Multiplication ({Plus.left=current} type=AdditionType right=Multiplication)*;
	
AdditionType:
	AdditionOp | SubtractionOp
;

AdditionOp:
	{AdditionOp} '+'
;

SubtractionOp:
	{SubtractionOp} '-'
;
	
Multiplication returns Expression:
	PostfixOperator ( {Multi.left=current} type=MultiplicationType right=PostfixOperator)*
;

MultiplicationType:
	MultiplicationOp | DivisionOp | ModuloOp
;

MultiplicationOp:
	{MultiplicationOp} ('*' | '·')
;

DivisionOp:
	{DivisionOp} ('/' | '÷')
;

ModuloOp:
	{ModuloOp} '%'
;
	
// TODO: unary expressions
/*UnaryMinusOperator returns Expression:
	 ('-' {UnaryMinus.expr=current})? PostfixOperator
;*/
	
PostfixOperator returns Expression:
	Atomic ({ArrayAccess.expr=current} "[" index=Expr "]")?;
	
// An atomic value in an expression is either
//  - a function call or
//  - a number or
//  - a Boolean literal or
//  - a whole new expression in parentheses.
Atomic returns Expression:
	FunctionCall | {NumberLiteral} value=INT | BooleanLiteral | '(' expr=Expr ')'
;

// A Boolean literal is either "true" or "false"
BooleanLiteral:
	TrueLiteral | FalseLiteral
;

// A FalseLiteral is the text "false".
FalseLiteral:
	{FalseLiteral} 'false'
;

// A TrueLiteral is the text "true".
TrueLiteral:
	{TrueLiteral} 'true'	
;