grammar org.xtext.example.mydsl.MyDsl with org.eclipse.xtext.common.Terminals

generate myDsl "http://www.xtext.org/example/mydsl/MyDsl"

// A program consists of a sequence of statements and/or function declarations.
Program:
	{Program}
	(statements+=Statement | functions+=FunctionDeclaration)? // The first statement does not need a newline before …
	(NL+ (statements+=Statement | functions+=FunctionDeclaration))* // … but all the other statements do.
	NL* // Newline at the end of the file is allowed. 
;

// Override the whitespace rules: Disallow line breaks as whitespace since we want to use them to separate statements 
terminal WS : (' '|'\t')+;

// A newline preceding a statement consists of at least a newline character, optionally followed by some whitespace and moar newlines.
// The latter is necessary because of "blank lines" that have some whitespace (e.g. indentation) in them.
// TODO: \r
terminal NL : '\n' ('\n' | WS)*;

// A single line comment includes everything from // to the next newline, but not the newline itself.
terminal SL_COMMENT : 
	'//' !('\n'|'\r')*
;

// A block consists of one or multiple statements enclosed in curly brackets.
Block:
	{Block} '{' (statements+=Statement)? (NL+ statements+=Statement)* NL* '}'
;

// A statement is everything that can be executed in the program.
Statement:
	(VariableDeclaration | Assignment | Block | Annotation | FunctionCall | IfStatement | WhileStatement | ReturnStatement )
;

// A return statement returns a value from a function.
ReturnStatement:
	'return' returnExpr=Expr
;

// A while statement specifies a while loop.
WhileStatement:
	'while' condition=Expr body=Block
;

// An if statement specifies a conditional expression.
IfStatement:
	'if' condition=Expr then=Block ('else' else=Block)?
;

// A function declaration declares a function name, parameters, return type, and function body.
FunctionDeclaration returns Function:
	'function' returnType=Type name=ID '(' (params+=Parameter (',' params+=Parameter)* )? ')' body=Block
;

// A parameter definition describes a single parameter (type and name) accepted by a function.
Parameter returns Variable:
	{Parameter} type=Type name=ID
;

// A type can either be a primitive type or an array of a primitive type
Type:
	PrimitiveType | ArrayType
;

// A primitive type represents a variable type that can hold one value.
PrimitiveType:
	IntType | BoolType	
;

// An integer type represents an arbitrarily large integer.
IntType:
	{IntType} 'int'
;

// A bool type represents a Boolean value.
BoolType:
	{BoolType} 'bool'
;

// An array type represents an array of a primitive type.
ArrayType:
	{ArrayType} baseType=PrimitiveType '[' ']'
;

// A function call simply calls a function without returning a value.
FunctionCall:
	{FunctionRef} symbol=[Function] '(' (actuals+=Expr)? (',' actuals+=Expr)* ')'
;

// An annotation is used to specify assertions and assumptions.
Annotation:
	 ({Assertion} '_assert' | {Assumption} '_assume') '(' expr=QuantifiedExpr ')'
;

// A quantified expression is an expression optionally preceded by some quantifier definitions.
// TODO: Allow moar or less than one quantifier
QuantifiedExpr returns Expression:
	(({ForAllExpression} ('forall' | '∀') | {ExistsExpression} ('exists' | '∃')) var=VariableDeclarationWithoutInitialValue)
;


// A variable declaration declares a new variable and optionally assigns it a value.
VariableDeclaration returns Variable:
	type=Type name=ID ( ':=' initialValue=Expr)
;

// This variable declaration declares a new variable, but does not assign it a value
VariableDeclarationWithoutInitialValue returns Variable:
	type=Type name=ID
;

// An assignment assigns a value to a variable.
Assignment:
	variable=[Variable] ':=' value=Expr
;

// An expression is based on operator precedence. Each "level" of expressions means one level of operator precedence,
// where the last operation specified has the highest priority. In the same level, operators are evaluated from left to right.
Expr:
	BooleanOr
;

// The boolean or has the lowest priority.
BooleanOr returns Expression:
	BooleanAnd ({Or.left=current} ('∨' | '||') right=BooleanAnd)?
;

// The boolean and has second lowest priority.
BooleanAnd returns Expression:
	EqualsComparison ({And.left=current} ('∧' | '&&') right=EqualsComparison)?
;

// The equals comparison is next in priority.
EqualsComparison returns Expression:
	Comparison ({Equals.left=current} '=' right=Comparison)?
;
	
// A comparison of two integer values is next in priority.
Comparison returns Expression:
	Addition (({Less.left=current} '<' | {LessOrEqual.left=current} ('<=' | '≤') | {GreaterOrEqual.left=current} ('>=' | '≥') | {Greater.left=current} '>') right=Addition)?
;

// Next in priority are addition and subtraction
Addition returns Expression:
	Multiplication (({Plus.left=current} '+' | {Minus.left=current} '-') right=Multiplication)*
;

// Next in priority are multiplication, division, and modulo.
Multiplication returns Expression:
	UnaryOperation (({Multi.left=current} ('*' | '·') | {Div.left=current} ('/' | '÷') | {Modulo.left=current} '%') right=UnaryOperation)*
;

// The unary operations (unary plus, unary minus, Boolean not) have second highest priority.
UnaryOperation returns Expression:
	 ArrayAccess | (({UnaryMinusOperator} '-' | {UnaryPlusOperator} '+' | {UnaryNotOperator} ('¬'|'!') ) expr=UnaryOperation)
;
	
// The access of array items via an index has highest priority.
ArrayAccess returns Expression:
	Atomic ({ArrayAccess.expr=current} "[" index=Expr "]")?
;
	
// An atomic value in an expression is either
//  - a function call or
//  - a number or
//  - a Boolean literal or
//  - a reference to a variable
//  - a whole new expression in parentheses.
Atomic returns Expression:
	FunctionCall | {NumberLiteral} value=INT | BooleanLiteral | VariableRef | '(' expr=Expr ')'
;

// A Boolean literal is either "true" or "false"
BooleanLiteral:
	TrueLiteral | FalseLiteral
;

// A FalseLiteral is the text "false".
FalseLiteral:
	{FalseLiteral} 'false'
;

// A TrueLiteral is the text "true".
TrueLiteral:
	{TrueLiteral} 'true'	
;

VariableRef:
	{VariableRef} symbol=[Variable]
;