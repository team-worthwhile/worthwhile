// Swaps two elements in a perm-array and updates the permutation accordingly.
function Integer[] swap(Integer[] source, Integer arrayLength, Integer index1, Integer index2)
	_requires arrayLength ≥ 1
	_requires 0 ≤ index1 ∧ index1 < arrayLength
	_requires 0 ≤ index2 ∧ index2 < arrayLength

	_ensures ∀ Integer i2, i2 ≠ index1 ∧ i2 ≠ index2 ∧ i2 ≠ arrayLength + index1 ∧ i2 ≠ arrayLength + index2 : _return[i2] = source[i2]
	_ensures _return[index1] = source[index2]
	_ensures _return[index2] = source[index1]
	_ensures _return[arrayLength + index1] = source[arrayLength + index2]
	_ensures _return[arrayLength + index2] = source[arrayLength + index1]
{
	Integer[] res := source

	Integer tmp := res[index1]
	res[index1] := res[index2]
	res[index2] := tmp
	
	tmp := res[arrayLength + index1]
	res[arrayLength + index1] := res[arrayLength + index2]
	res[arrayLength + index2] := tmp
	
	return res
}

// Sorts the given array A of given length ascendingly using the BubbleSort algorithm
// The array elements to sort are stored in A at positions [0..length-1].
//
// This function returns a "perm-array": in the positions [0..length-1] are the sorted array elements,
// in the positions [length..2*length-1] is the permutation that maps each array element to its new position,
// i.e. at position [length+k] is the new position of the array element at position k in the original array.
function Integer[] bubbleSort(Integer[] A, Integer length)
	_requires length ≥ 1
	// Ensures that the resulting array is sorted
	_ensures ∀ Integer i1 ∀ Integer j1, 0 ≤ i1 ∧ i1 ≤ j1 ∧ j1 < length : _return[i1] ≤ _return[j1]
	
	// perm is a permutation
    _ensures ∀ Integer i12, 0 ≤ i12 ∧ i12 < length : 0 ≤ _return[length + i12] ∧ _return[length + i12] < length
    _ensures ∀ Integer i13 ∀ Integer j13, 0 ≤ i13 ∧ i13 < j13 ∧ j13 < length : _return[length + i13] != _return[length + j13]
	// the current array is that permutation of the input array
    _ensures ∀ Integer i14, 0 ≤ i14 ∧ i14 < length : _return[i14] = A[_return[length + i14]]
{
	
	Integer[] result := A
	
	// Initialize permutation
	Integer k := 0
	
	while (k < length)
		_invariant k ≤ length
		_invariant ∀ Integer i8, length ≤ i8 ∧ i8 < k : result[length + i8] = k
	{
		result[length + k] := k
	}
	
	Integer i := 0
	
	while i < length - 1 
		_invariant 0 ≤ i ∧ i ≤ length - 1
		// The array [1..i] is sorted
		_invariant ∀ Integer i3 ∀ Integer j3, 0 ≤ i3 ∧ i3 < j3 ∧ j3 ≤ i : result[i3] ≤ result[j3]
		// Any element in [i+1 .. length] is greater or equal to any element in [1..i-1]
		_invariant ∀ Integer i6, i + 1 ≤ i6 ∧ i6 < length : ∀ Integer j6, 0 ≤ j6 ∧ j6 ≤ i - 1 : result[i6] ≥ result[j6]
		
		// perm is a permutation
    	_invariant ∀ Integer i11, 0 ≤ i11 ∧ i11 < length : 0 ≤ result[length + i11] ∧ result[length + i11] < length
    	_invariant ∀ Integer i9 ∀ Integer j9, 0 ≤ i9 ∧ i9 < j9 ∧ j9 < length : result[length + i9] != result[length + j9]
	    // the current array is that permutation of the input array
    	_invariant ∀ Integer i10, 0 ≤ i10 ∧ i10 < length : result[i10] = A[result[length + i10]]
	{
		Integer j := i + 1
		
		while j < length 
			_invariant i + 1 ≤ j ∧ j ≤ length
			
			// The array [1..i] is (still) sorted
			_invariant ∀ Integer i4 ∀ Integer j4, 0 ≤ i4 ∧ i4 < j4 ∧ j4 ≤ i : result[i4] ≤ result[j4]
			// Any element in [i+1 .. length] is (still) greater or equal to any element in [1..i-1]
			_invariant ∀ Integer i7, i + 1 ≤ i7 ∧ i7 < length : ∀ Integer j7, 0 ≤ j7 ∧ j7 ≤ i - 1 : result[i7] ≥ result[j7]
			
			// result[i] is the smallest of all elements we looked at in this loop
			_invariant ∀ Integer i5, i + 1 ≤ i5 ∧ i5 < j : result[i] ≤ result[i5]
		{	
			if result[i] > result[j] {
				result := swap(result, length, i, j)
			}
			
			j := j + 1
		}
		
		i := i + 1
	}
	
	return result
}
