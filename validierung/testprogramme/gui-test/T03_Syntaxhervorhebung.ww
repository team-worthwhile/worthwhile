/*
 * Some nonsense program.
 */
_axiom false => true

// This is a function called func.
function Integer func(Boolean adams)
	_requires adams = false || adams = true
	_ensures _return >= 0
	_ensures (adams => (_return = 42)) && (!adams => (_return = 0))
{
	if (adams) {
		return 42
	} else {
		return 0
	}
}

Boolean b := false
Integer i := 0

Integer[] funcresults := {func(b), func(!b)}

_assert ∃ Integer j, 0 ≤ j ∧ j ≤ 1 : funcresults[j] ≥ 0
_assume ∀ Integer k, 0 ≤ k ∧ k ≤ 1 : funcresults[k] ≥ 0

while (i ≤ 1) {
	i := i + funcresults[i]
	i := i + 1
}

_assert i = 42
