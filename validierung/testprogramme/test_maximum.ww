function Integer sort(Integer[] array, Integer count)
_requires(count > 0)
_ensures((forall Integer i1, 0 ≤ i1 ∧ i1 < count : _return ≥ i1) ∧ (exists Integer i2, 0 ≤ i2 ∧ i2 < count : _return = i2))
{
  Integer max := array[0]
  Integer i := 1

  while (i < count)
  _invariant(forall Integer j, j < i : max ≥ array[j])
  {
    if (array[i] > max) {
      max := array[i]
    }

    i := i + 1
  }

  return max
}

/*
(declare-const array (Array Int Int))
(declare-const count Int)
(assert (> count 0))

;(define-fun max () Int (select array 0))
;(define-fun i () Int 1)

(define-fun invariant ((max Int) (i Int)) Bool
    (forall ((j Int)) (implies (and (>= j 0) (< j i)) (>= max (select array j))))
)

(assert (not (and (and
      (invariant (select array 0) 1)
      (forall ((i Int) (max Int))
         (implies
            (and (and (>= i 0) (< i count)) (invariant max i))
            (invariant (if (> (select array i) max) (select array i) max) (+ i 1))
         )
      )
   )
   (forall ((i Int) (max Int))
      (implies
         (and (and (>= i 0) (not (< i count))) (invariant max i))
         (invariant max count)
      )
   )
)))
*/
